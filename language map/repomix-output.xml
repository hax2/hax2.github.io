This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
forkiro
index.html
js/data.js
js/game.js
js/main.js
js/ui.js
js/utils.js
package.json
README.md
styles/components.css
styles/main.css
sw.js
test_multiword.html
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="forkiro">
const NEW_GRAMMAR_REGIONS = {
    pastTenseArVerbs: {
      name: 'Pretérito: Verbos -AR',
      color: '#34D399',
      description: 'Learn the past tense (preterite) for regular -AR verbs. This tense is used for completed actions in the past. We will conjugate the verb "hablar" (to speak).',
      flashcards: [
        {
          front: 'Yo hablé con el profesor ayer.',
          back: 'I spoke with the professor yesterday.',
          context: 'This is the "yo" (I) form. The accent on the final "é" is critical. It changes the pronunciation and distinguishes it from other words. Without the accent, "hable" would be a subjunctive form. This ending, "-é", is the rule for all regular -AR verbs in the "yo" form preterite.',
          grammar: "Preterite 'yo' form for -AR verbs. Stem 'habl-' + ending '-é'.",
          breakdown: {
            'Yo': 'I',
            'hablé': 'spoke',
            'con': 'with',
            'el': 'the',
            'profesor': 'professor',
            'ayer': 'yesterday'
          }
        },
        {
          front: 'Tú hablaste con María por teléfono.',
          back: 'You spoke with María on the phone.',
          context: 'This is the "tú" (you, informal) form. The ending "-aste" is consistent for all regular -AR verbs. Unlike the "yo" and "él/ella" forms, this one does not have a written accent mark.',
          grammar: "Preterite 'tú' form for -AR verbs. Stem 'habl-' + ending '-aste'.",
          breakdown: {
            'Tú': 'You (informal)',
            'hablaste': 'spoke',
            'con': 'with',
            'María': 'María',
            'por': 'by / on',
            'teléfono': 'telephone'
          }
        },
        {
          front: 'Usted habló de un tema muy interesante.',
          back: 'You (formal) spoke about a very interesting topic.',
          context: 'This is the "él/ella/usted" (he/she/you formal) form. The verb ending "-ó" is the same for all three pronouns. Again, the accent is crucial. "Habló" (he spoke) is very different from "hablo" (I speak).',
          grammar: "Preterite 'él/ella/usted' form for -AR verbs. Stem 'habl-' + ending '-ó'.",
          breakdown: {
            'Usted': 'You (formal)',
            'habló': 'spoke',
            'de': 'of / about',
            'un': 'a',
            'tema': 'topic',
            'muy': 'very',
            'interesante': 'interesting'
          }
        },
        {
          front: 'Nosotros hablamos sobre la película anoche.',
          back: 'We spoke about the movie last night.',
          context: 'This is the most confusing form for learners. The "nosotros" (we) form of -AR verbs in the preterite is IDENTICAL to the present tense form. Only the context words (like "anoche", "ayer", "la semana pasada") tell you it\'s in the past.',
          grammar: "Preterite 'nosotros' form for -AR verbs. Stem 'habl-' + ending '-amos'. Note: Identical to the present tense form.",
          breakdown: {
            'Nosotros': 'We',
            'hablamos': 'spoke',
            'sobre': 'about',
            'la': 'the',
            'película': 'movie',
            'anoche': 'last night'
          }
        },
        {
          front: 'Vosotros hablasteis con el guía turístico.',
          back: 'You (all) spoke with the tour guide. (Spain, informal)',
          context: 'This is the "vosotros" (you all, informal) form, used primarily in Spain. The "-asteis" ending is the standard for this form with regular -AR verbs. In Latin America, you would use the "ustedes" form instead.',
          grammar: "Preterite 'vosotros' form for -AR verbs. Stem 'habl-' + ending '-asteis'.",
          breakdown: {
            'Vosotros': 'You (plural, informal)',
            'hablasteis': 'spoke',
            'con': 'with',
            'el': 'the',
            'guía': 'guide',
            'turístico': 'tourist'
          }
        },
        {
          front: 'Ellos hablaron durante toda la reunión.',
          back: 'They spoke during the whole meeting.',
          context: 'This is the "ellos/ellas/ustedes" (they/you all) form. The "-aron" ending is the standard for this conjugation. This form is used for "they" (masculine or mixed), "they" (feminine), and "you all" (in Latin America and formal in Spain).',
          grammar: "Preterite 'ellos/ellas/ustedes' form for -AR verbs. Stem 'habl-' + ending '-aron'.",
          breakdown: {
            'Ellos': 'They',
            'hablaron': 'spoke',
            'durante': 'during',
            'toda': 'all / the whole',
            'la': 'the',
            'reunión': 'meeting'
          }
        }
      ]
    },
    pastTenseErVerbs: {
      name: 'Pretérito: Verbos -ER',
      color: '#F9A825',
      description: 'Learn the past tense (preterite) for regular -ER verbs. We will conjugate the verb "comer" (to eat) to show the pattern for completed past actions.',
      flashcards: [
        {
          front: 'Yo comí una ensalada para el almuerzo.',
          back: 'I ate a salad for lunch.',
          context: 'This is the "yo" (I) form for -ER verbs. The ending is "-í", with a required accent. This ending applies to all regular -ER verbs in this form.',
          grammar: "Preterite 'yo' form for -ER verbs. Stem 'com-' + ending '-í'.",
          breakdown: {
            'Yo': 'I',
            'comí': 'ate',
            'una': 'a',
            'ensalada': 'salad',
            'para': 'for',
            'el': 'the',
            'almuerzo': 'lunch'
          }
        },
        {
          front: '¿Tú comiste todo el pastel?',
          back: 'Did you eat the whole cake?',
          context: 'This is the "tú" (you, informal) form. The ending is "-iste". This is one of the most consistent and recognizable preterite endings.',
          grammar: "Preterite 'tú' form for -ER verbs. Stem 'com-' + ending '-iste'.",
          breakdown: {
            '¿Tú': 'You (informal)',
            'comiste': 'ate',
            'todo': 'all',
            'el': 'the',
            'pastel?': 'cake?'
          }
        },
        {
          front: 'Él comió en ese restaurante la semana pasada.',
          back: 'He ate at that restaurant last week.',
          context: 'This is the "él/ella/usted" form. The ending "-ió" with the accent is the standard. This helps distinguish it from the present tense.',
          grammar: "Preterite 'él/ella/usted' form for -ER verbs. Stem 'com-' + ending '-ió'.",
          breakdown: {
            'Él': 'He',
            'comió': 'ate',
            'en': 'in / at',
            'ese': 'that',
            'restaurante': 'restaurant',
            'la': 'the',
            'semana': 'week',
            'pasada': 'last'
          }
        },
        {
          front: 'Nosotros comimos paella en Valencia.',
          back: 'We ate paella in Valencia.',
          context: 'This is a key difference from -AR verbs. For regular -ER verbs, the "nosotros" preterite form ("comimos") is DIFFERENT from the present tense form ("comemos"). This makes it less ambiguous.',
          grammar: "Preterite 'nosotros' form for -ER verbs. Stem 'com-' + ending '-imos'. Note: This is different from the present tense 'comemos'.",
          breakdown: {
            'Nosotros': 'We',
            'comimos': 'ate',
            'paella': 'paella',
            'en': 'in',
            'Valencia': 'Valencia'
          }
        },
        {
          front: 'Vosotros comisteis mucho en la fiesta.',
          back: 'You (all) ate a lot at the party. (Spain, informal)',
          context: 'This is the "vosotros" (you all, informal) form, used in Spain. The ending is "-isteis".',
          grammar: "Preterite 'vosotros' form for -ER verbs. Stem 'com-' + ending '-isteis'.",
          breakdown: {
            'Vosotros': 'You (plural, informal)',
            'comisteis': 'ate',
            'mucho': 'a lot',
            'en': 'at',
            'la': 'the',
            'fiesta': 'party'
          }
        },
        {
          front: 'Ustedes comieron antes de venir.',
          back: 'You (all) ate before coming.',
          context: 'This is the "ellos/ellas/ustedes" form. The ending is "-ieron". This form is used for "they" and for the plural "you" in Latin America (and formal "you" in Spain).',
          grammar: "Preterite 'ellos/ellas/ustedes' form for -ER verbs. Stem 'com-' + ending '-ieron'.",
          breakdown: {
            'Ustedes': 'You (plural)',
            'comieron': 'ate',
            'antes': 'before',
            'de': 'of',
            'venir': 'coming / to come'
          }
        }
      ]
    },
    pastTenseIrVerbs: {
      name: 'Pretérito: Verbos -IR',
      color: '#60A5FA',
      description: 'Learn the past tense (preterite) for regular -IR verbs. We will conjugate "vivir" (to live). Note how similar the endings are to -ER verbs.',
      flashcards: [
        {
          front: 'Yo viví en Argentina por dos años.',
          back: 'I lived in Argentina for two years.',
          context: 'The "yo" form preterite for -IR verbs is "-í", exactly the same as for -ER verbs. This makes learning them together easier.',
          grammar: "Preterite 'yo' form for -IR verbs. Stem 'viv-' + ending '-í'.",
          breakdown: {
            'Yo': 'I',
            'viví': 'lived',
            'en': 'in',
            'Argentina': 'Argentina',
            'por': 'for',
            'dos': 'two',
            'años': 'years'
          }
        },
        {
          front: 'Tú viviste una experiencia increíble.',
          back: 'You lived an incredible experience.',
          context: 'The "tú" form ending is "-iste", which is also identical to the ending for regular -ER verbs in the preterite.',
          grammar: "Preterite 'tú' form for -IR verbs. Stem 'viv-' + ending '-iste'.",
          breakdown: {
            'Tú': 'You (informal)',
            'viviste': 'lived',
            'una': 'an',
            'experiencia': 'experience',
            'increíble': 'incredible'
          }
        },
        {
          front: 'Ella vivió cerca de la playa.',
          back: 'She lived near the beach.',
          context: 'The "él/ella/usted" form ending is "-ió", once again the same as the corresponding -ER verb ending.',
          grammar: "Preterite 'él/ella/usted' form for -IR verbs. Stem 'viv-' + ending '-ió'.",
          breakdown: {
            'Ella': 'She',
            'vivió': 'lived',
            'cerca': 'near',
            'de': 'of',
            'la': 'the',
            'playa': 'beach'
          }
        },
        {
          front: 'Nosotros vivimos allí el año pasado.',
          back: 'We lived there last year.',
          context: 'This is the first major difference from -ER verbs and a critical point. For -IR verbs, the "nosotros" preterite form ("vivimos") is IDENTICAL to the present tense form ("vivimos"), just like with -AR verbs. You need context to know the tense.',
          grammar: "Preterite 'nosotros' form for -IR verbs. Stem 'viv-' + ending '-imos'. Note: Identical to the present tense form.",
          breakdown: {
            'Nosotros': 'We',
            'vivimos': 'lived',
            'allí': 'there',
            'el': 'the',
            'año': 'year',
            'pasado': 'last'
          }
        },
        {
          front: 'Vosotros vivisteis en Madrid, ¿verdad?',
          back: 'You (all) lived in Madrid, right? (Spain, informal)',
          context: 'This is the second difference from -ER verbs. The "vosotros" ending for -IR verbs is "-isteis", just like for -ER verbs. So only the "nosotros" and "vosotros" forms of -er and -ir differ in the present tense, but only the "nosotros" forms differ in the preterite (by being identical to present). This card shows the "-isteis" ending, same as -ER verbs.',
          grammar: "Preterite 'vosotros' form for -IR verbs. Stem 'viv-' + ending '-isteis'.",
          breakdown: {
            'Vosotros': 'You (plural, informal)',
            'vivisteis': 'lived',
            'en': 'in',
            'Madrid': 'Madrid',
            '¿verdad?': 'right? / true?'
          }
        },
        {
          front: 'Ellos escribieron un libro juntos.',
          back: 'They wrote a book together.',
          context: 'Using another -IR verb, "escribir", to show the pattern holds. The "ellos/ellas/ustedes" form ends in "-ieron", which is the same as the ending for -ER verbs.',
          grammar: "Preterite 'ellos/ellas/ustedes' form for -IR verbs. Stem 'escrib-' + ending '-ieron'.",
          breakdown: {
            'Ellos': 'They',
            'escribieron': 'wrote',
            'un': 'a',
            'libro': 'book',
            'juntos': 'together'
          }
        }
      ]
    }
  };
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Language Map Quest – Spanish Learning Game</title>
  <link rel="stylesheet" href="styles/main.css">
  <link rel="stylesheet" href="styles/components.css">
</head>
<body>
  <div class="container">
    <!-- Header -->
    <header class="header">
      <div class="header-left">
        <h1>🗺️ Language Map Quest</h1>
      </div>
      <div class="header-right">
        <div class="xp-info">
          <span id="xpCounter" class="xp-num">0 XP</span>
          <span id="levelLabel" class="level">Lvl 1</span>
          <progress id="xpBar" value="0" max="100"></progress>
        </div>
        <button id="settingsBtn" class="settings-btn" aria-label="Settings">⚙️</button>
        <button id="darkModeToggle" class="dark-mode-toggle" aria-label="Toggle dark mode">
          <span class="dark-icon">🌙</span>
          <span class="light-icon">☀️</span>
        </button>
      </div>
    </header>

    <!-- Navigation Tabs -->
    <nav class="tab-navigation">
      <button class="tab-btn active" data-tab="map">
        🗺️ Regiones de Español
      </button>
      <button class="tab-btn" data-tab="game">
        🎮 Juego de Flashcards
      </button>
      <button class="tab-btn" data-tab="progress">
        📊 Progreso
      </button>
    </nav>

    <!-- Tab Content -->
    <main class="tab-content">
      <!-- Map Tab -->
      <section id="map-tab" class="tab-panel active">
        <div class="map-section">
          <h2>Regiones de Español</h2>
          <div id="mapContainer" class="map-container">
            <!-- Map regions will be generated here -->
          </div>
        </div>
      </section>

      <!-- Game Tab -->
      <section id="game-tab" class="tab-panel">
        <div class="game-section">
          <div class="panel-header">
            <h3 id="panelTitle">Selecciona una región</h3>
            <div class="mode-buttons">
              <button id="flashcardBtn" class="mode-btn active" data-mode="flashcard">
                📚 Flashcards
              </button>
              <button id="quizBtn" class="mode-btn" data-mode="quiz">
                ❓ Quiz
              </button>
              <button id="crBtn" class="mode-btn" data-mode="call-response">
                💬 Call & Response
              </button>
            </div>
          </div>
          
          <div id="panelBody" class="panel-body">
            <p class="placeholder-text">Elige una región del mapa para comenzar a aprender español.</p>
          </div>
        </div>
      </section>

      <!-- Progress Tab -->
      <section id="progress-tab" class="tab-panel">
        <div class="progress-section">
          <h3>Progreso</h3>
          <div id="progressContainer" class="progress-container">
            <!-- Progress bars will be generated here -->
          </div>
        </div>
      </section>
    </main>
  </div>

  <!-- Scripts -->
  <script src="js/data.js"></script>
  <script src="js/utils.js"></script>
  <script src="js/game.js"></script>
  <script src="js/ui.js"></script>
  <script src="js/main.js"></script>
</body>
</html>
</file>

<file path="js/game.js">
// Game State and Logic

class LanguageGame {
  constructor() {
    this.xp = 0;
    this.currentRegionKey = null;
    this.currentMode = 'flashcard';
    this.learnedByRegion = {};
    this.learnedMap = new Map();
    this.quizRemaining = [];
    this.crRemaining = [];
    this.settings = this.loadSettings();
    
    // Load saved state
    this.loadGameState();
  }

  /**
   * Load settings from localStorage or use defaults
   */
  loadSettings() {
    const saved = localStorage.getItem('languageGameSettings');
    if (saved) {
      try {
        return { ...DEFAULT_SETTINGS, ...JSON.parse(saved) };
      } catch (e) {
        console.warn('Failed to load settings, using defaults');
        return { ...DEFAULT_SETTINGS };
      }
    }
    return { ...DEFAULT_SETTINGS };
  }

  /**
   * Save settings to localStorage
   */
  saveSettings() {
    try {
      localStorage.setItem('languageGameSettings', JSON.stringify(this.settings));
    } catch (e) {
      console.error('Failed to save settings:', e);
    }
  }

  /**
   * Update a setting
   */
  updateSetting(key, value) {
    this.settings[key] = value;
    this.saveSettings();
  }

  /**
   * Get a setting value
   */
  getSetting(key) {
    return this.settings[key];
  }

  /**
   * Reset settings to defaults
   */
  resetSettings() {
    this.settings = { ...DEFAULT_SETTINGS };
    this.saveSettings();
  }

  /**
   * Load game state from localStorage
   */
  loadGameState() {
    this.xp = loadFromStorage('languageGame_xp', 0);
    this.learnedByRegion = loadFromStorage('languageGame_learnedByRegion', {});
    this.learnedMap = new Map(loadFromStorage('languageGame_learnedMap', []));
  }

  /**
   * Save game state to localStorage
   */
  saveGameState() {
    saveToStorage('languageGame_xp', this.xp);
    saveToStorage('languageGame_learnedByRegion', this.learnedByRegion);
    saveToStorage('languageGame_learnedMap', Array.from(this.learnedMap.entries()));
  }

  /**
   * Add XP and mark item as learned
   * @param {string} spanish - Spanish text
   * @param {string} english - English text
   * @param {string} regionKey - Region key
   * @param {number} xpGain - XP to gain
   */
  addLearned(spanish, english, regionKey, xpGain = 10) {
    const key = `${spanish}|${english}`;
    
    if (!this.learnedMap.has(key)) {
      this.learnedMap.set(key, {
        spanish,
        english,
        regionKey,
        learnedAt: Date.now(),
        xpGained: xpGain
      });
      
      this.xp += xpGain;
      
      if (!this.learnedByRegion[regionKey]) {
        this.learnedByRegion[regionKey] = 0;
      }
      this.learnedByRegion[regionKey]++;
      
      this.saveGameState();
      return true; // Newly learned
    }
    
    return false; // Already learned
  }

  /**
   * Get progress for a specific region
   * @param {string} regionKey - Region key
   * @returns {Object} - Progress information
   */
  getRegionProgress(regionKey) {
    const region = REGIONS[regionKey];
    if (!region) return null;
    
    const learned = this.learnedByRegion[regionKey] || 0;
    const total = region.flashcards.length;
    const percentage = calculatePercentage(learned, total);
    
    return {
      learned,
      total,
      percentage,
      region: region
    };
  }

  /**
   * Get overall progress across all regions
   * @returns {Object} - Overall progress
   */
  getOverallProgress() {
    const regions = Object.keys(REGIONS);
    let totalLearned = 0;
    let totalCards = 0;
    
    regions.forEach(regionKey => {
      const progress = this.getRegionProgress(regionKey);
      if (progress) {
        totalLearned += progress.learned;
        totalCards += progress.total;
      }
    });
    
    return {
      totalLearned,
      totalCards,
      percentage: calculatePercentage(totalLearned, totalCards)
    };
  }

  /**
   * Set current region
   * @param {string} regionKey - Region key
   */
  setCurrentRegion(regionKey) {
    this.currentRegionKey = regionKey;
  }

  /**
   * Set current mode
   * @param {string} mode - Game mode
   */
  setCurrentMode(mode) {
    this.currentMode = mode;
  }

  /**
   * Get current region data
   * @returns {Object|null} - Current region data
   */
  getCurrentRegion() {
    return this.currentRegionKey ? REGIONS[this.currentRegionKey] : null;
  }

  /**
   * Get flashcards for current region
   * @returns {Array} - Flashcards array
   */
  getCurrentFlashcards() {
    const region = this.getCurrentRegion();
    return region ? region.flashcards : [];
  }

  /**
   * Get unlearned flashcards for current region
   * @returns {Array} - Unlearned flashcards
   */
  getUnlearnedFlashcards() {
    const flashcards = this.getCurrentFlashcards();
    return flashcards.filter(card => {
      const key = `${card.front}|${card.back}`;
      return !this.learnedMap.has(key);
    });
  }

  /**
   * Get quiz options for a given card
   * @param {Object} correctCard - The correct card
   * @returns {Array} - Quiz options including the correct answer
   */
  getQuizOptions(correctCard) {
    const currentCards = this.getCurrentFlashcards();
    const otherCards = currentCards.filter(card => 
      card.front !== correctCard.front
    );
    
    // Get 3 random wrong answers
    const wrongAnswers = shuffle(otherCards).slice(0, 3);
    const options = [...wrongAnswers, correctCard];
    
    return shuffle(options);
  }

  /**
   * Check if answer is correct for quiz
   * @param {string} userAnswer - User's selected answer
   * @param {Object} correctCard - The correct card
   * @returns {boolean} - Whether answer is correct
   */
  checkQuizAnswer(userAnswer, correctCard) {
    return userAnswer === correctCard.front;
  }

  /**
   * Check if answer is correct for call & response with enhanced validation
   * @param {string} userAnswer - User's typed answer
   * @param {Object} correctCard - The correct card
   * @returns {Object} - Validation result with details
   */
  checkCRAnswer(userAnswer, correctCard) {
    return validateAnswer(userAnswer, correctCard.front);
  }

  /**
   * Get next quiz card
   * @returns {Object|null} - Next quiz card or null if none left
   */
  getNextQuizCard() {
    if (this.quizRemaining.length === 0) {
      this.quizRemaining = shuffle([...this.getCurrentFlashcards()]);
    }
    
    return this.quizRemaining.length > 0 ? this.quizRemaining.pop() : null;
  }

  /**
   * Get next call & response card
   * @returns {Object|null} - Next CR card or null if none left
   */
  getNextCRCard() {
    if (this.crRemaining.length === 0) {
      this.crRemaining = shuffle([...this.getCurrentFlashcards()]);
    }
    
    return this.crRemaining.length > 0 ? this.crRemaining.pop() : null;
  }

  /**
   * Reset quiz for current region
   */
  resetQuiz() {
    this.quizRemaining = shuffle([...this.getCurrentFlashcards()]);
  }

  /**
   * Reset call & response for current region
   */
  resetCR() {
    this.crRemaining = shuffle([...this.getCurrentFlashcards()]);
  }

  /**
   * Get XP display value
   * @returns {string} - Formatted XP
   */
  getXPDisplay() {
    return formatXP(this.xp);
  }

  /**
   * Get level information
   * @returns {Object} - Level information
   */
  getLevelInfo() {
    return getLevelInfo(this.xp);
  }

  /**
   * Get all regions with their progress
   * @returns {Object} - Regions with progress data
   */
  getAllRegionsWithProgress() {
    const regionsWithProgress = {};
    
    Object.keys(REGIONS).forEach(regionKey => {
      const progress = this.getRegionProgress(regionKey);
      if (progress) {
        regionsWithProgress[regionKey] = {
          ...REGIONS[regionKey],
          progress
        };
      }
    });
    
    return regionsWithProgress;
  }

  /**
   * Reset all progress (for testing/debugging)
   */
  resetProgress() {
    this.xp = 0;
    this.learnedByRegion = {};
    this.learnedMap.clear();
    this.saveGameState();
  }

  /**
   * Export game data
   * @returns {Object} - Game data for export
   */
  exportGameData() {
    return {
      xp: this.xp,
      levelInfo: this.getLevelInfo(),
      learnedByRegion: this.learnedByRegion,
      learnedMap: Array.from(this.learnedMap.entries()),
      overallProgress: this.getOverallProgress(),
      exportDate: new Date().toISOString()
    };
  }

  /**
   * Import game data
   * @param {Object} data - Game data to import
   */
  importGameData(data) {
    if (data.xp !== undefined) this.xp = data.xp;
    if (data.learnedByRegion) this.learnedByRegion = data.learnedByRegion;
    if (data.learnedMap) this.learnedMap = new Map(data.learnedMap);
    
    this.saveGameState();
  }
}

// Create global game instance
const game = new LanguageGame();
</file>

<file path="js/main.js">
// Main Application Entry Point

/**
 * Initialize the application when DOM is loaded
 */
document.addEventListener('DOMContentLoaded', () => {
  // Initialize UI
  ui.initialize();
  
  // Apply settings on startup
  ui.applySettings();
  
  // Initialize theme
  initializeTheme();
  initializeDarkModeToggle();
  
  // Add settings button event listener
  const settingsBtn = document.getElementById('settingsBtn');
  if (settingsBtn) {
    settingsBtn.addEventListener('click', () => {
      ui.showSettings();
    });
  }
  
  // Debug commands
  window.debugGame = {
    addXP: (amount) => {
      game.addXP(amount);
      ui.updateXPDisplay();
      ui.renderMap();
    },
    resetProgress: () => {
      game.resetProgress();
      ui.renderMap();
      ui.renderPlaceholder();
    },
    exportData: () => {
      const data = game.exportGameData();
      console.log('Game Data:', data);
      return data;
    },
    toggleTheme: () => {
      toggleTheme();
    },
    switchTab: (tabName) => {
      ui.switchTab(tabName);
    }
  };
  
  // Visibility change handling
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      ui.renderMap();
    }
  });
  
  // Before unload handling
  window.addEventListener('beforeunload', () => {
    game.saveGameState();
  });
  
  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + D for dark mode
    if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
      e.preventDefault();
      toggleTheme();
    }
    
    // Ctrl/Cmd + , for settings
    if ((e.ctrlKey || e.metaKey) && e.key === ',') {
      e.preventDefault();
      ui.showSettings();
    }
    
    // Tab switching shortcuts
    if (e.altKey) {
      switch(e.key) {
        case '1':
          e.preventDefault();
          ui.switchTab('map');
          break;
        case '2':
          e.preventDefault();
          ui.switchTab('game');
          break;
        case '3':
          e.preventDefault();
          ui.switchTab('progress');
          break;
      }
    }
  });
  
  // Service Worker registration
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('sw.js')
      .then(registration => {
        console.log('SW registered: ', registration);
      })
      .catch(registrationError => {
        console.log('SW registration failed: ', registrationError);
      });
  }
  
  // Performance monitoring
  if ('performance' in window) {
    window.addEventListener('load', () => {
      setTimeout(() => {
        const perfData = performance.getEntriesByType('navigation')[0];
        console.log('Page load time:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
      }, 0);
    });
  }
  
  // Error handling
  window.addEventListener('error', (e) => {
    console.error('Global error:', e.error);
  });
  
  console.log('🚀 Language Map Quest initialized successfully!');
  console.log('💡 Debug commands available: debugGame.addXP(100), debugGame.resetProgress(), debugGame.exportData(), debugGame.switchTab("map")');
  console.log('⌨️ Keyboard shortcuts: Alt+1 (Map), Alt+2 (Game), Alt+3 (Progress), Ctrl/Cmd+D (Dark Mode), Ctrl/Cmd+, (Settings)');
});

/**
 * Initialize dark mode toggle functionality
 */
function initializeDarkModeToggle() {
  const darkModeToggle = document.getElementById('darkModeToggle');
  if (darkModeToggle) {
    darkModeToggle.addEventListener('click', () => {
      const newTheme = toggleTheme();
      console.log('Theme switched to:', newTheme);
    });
  }
}

/**
 * Handle page visibility changes to save state
 */
document.addEventListener('visibilitychange', function() {
  if (document.hidden) {
    game.saveGameState();
  }
});

/**
 * Handle beforeunload to save state
 */
window.addEventListener('beforeunload', function() {
  game.saveGameState();
});

/**
 * Add keyboard shortcuts
 */
document.addEventListener('keydown', function(event) {
  // Only handle shortcuts when not typing in an input
  if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
    return;
  }
  
  switch(event.key) {
    case '1':
      if (ui.getCurrentTab() === 'game') {
        ui.switchMode('flashcard');
      }
      break;
    case '2':
      if (ui.getCurrentTab() === 'game') {
        ui.switchMode('quiz');
      }
      break;
    case '3':
      if (ui.getCurrentTab() === 'game') {
        ui.switchMode('call-response');
      }
      break;
    case ' ':
      // Space to flip flashcard
      if (ui.getCurrentTab() === 'game' && game.currentMode === 'flashcard') {
        ui.flipFlashcard();
      }
      event.preventDefault();
      break;
    case 'ArrowLeft':
      if (ui.getCurrentTab() === 'game' && game.currentMode === 'flashcard') {
        ui.previousFlashcard();
      }
      break;
    case 'ArrowRight':
      if (ui.getCurrentTab() === 'game' && game.currentMode === 'flashcard') {
        ui.nextFlashcard();
      }
      break;
    case 'd':
    case 'D':
      // Toggle dark mode with 'd' key
      if (event.ctrlKey || event.metaKey) {
        toggleTheme();
        event.preventDefault();
      }
      break;
  }
});

/**
 * Add service worker for offline support (if supported)
 */
if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('/sw.js')
      .then(function(registration) {
        console.log('ServiceWorker registration successful');
      })
      .catch(function(err) {
        console.log('ServiceWorker registration failed');
      });
  });
}

/**
 * Add performance monitoring
 */
window.addEventListener('load', function() {
  // Log performance metrics
  if ('performance' in window) {
    const perfData = performance.getEntriesByType('navigation')[0];
    console.log('Page Load Time:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
  }
});

/**
 * Add error handling
 */
window.addEventListener('error', function(event) {
  console.error('Application Error:', event.error);
});

/**
 * Add unhandled promise rejection handling
 */
window.addEventListener('unhandledrejection', function(event) {
  console.error('Unhandled Promise Rejection:', event.reason);
});

// Export for testing
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { game, ui };
}
</file>

<file path="js/utils.js">
// Utility Functions

/**
 * Normalize text for comparison (remove accents, lowercase, etc.)
 * @param {string} str - The string to normalize
 * @returns {string} - Normalized string
 */
const normalize = (str) => {
  return str
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove diacritics
    .replace(/[^a-z0-9\s]/g, '') // Remove special characters and punctuation
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();
};

/**
 * Calculate Levenshtein distance between two strings
 * @param {string} a - First string
 * @param {string} b - Second string
 * @returns {number} - Distance between strings
 */
function levenshtein(a, b) {
  if (a.length === 0) return b.length;
  if (b.length === 0) return a.length;
  
  const matrix = Array.from({ length: a.length + 1 }, () => []);
  
  for (let i = 0; i <= a.length; i++) matrix[i][0] = i;
  for (let j = 0; j <= b.length; j++) matrix[0][j] = j;
  
  for (let i = 1; i <= a.length; i++) {
    for (let j = 1; j <= b.length; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,     // deletion
        matrix[i][j - 1] + 1,     // insertion
        matrix[i - 1][j - 1] + cost // substitution
      );
    }
  }
  
  return matrix[a.length][b.length];
}

/**
 * Shuffle an array using Fisher-Yates algorithm
 * @param {Array} array - Array to shuffle
 * @returns {Array} - Shuffled array
 */
function shuffle(array) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// TTS cache to prevent repeated messages
const ttsCache = {
  messages: new Map()
};

/**
 * Get TTS cooldown time from settings
 * @returns {number} - Cooldown time in milliseconds
 */
function getTTSCooldown() {
  if (typeof game !== 'undefined' && game.getSetting) {
    return game.getSetting('ttsCooldown');
  }
  return 3000; // Default 3 seconds
}

/**
 * Speak Spanish text using Web Speech API
 * @param {string} text - Text to speak
 * @param {string} lang - Language code (default: 'es')
 */
function speakSpanish(text, lang = 'es') {
  if ('speechSynthesis' in window) {
    const messageKey = `${text}_${lang}`;
    const now = Date.now();
    const cooldownTime = getTTSCooldown();

    const lastSpoken = ttsCache.messages.get(messageKey);
    if (lastSpoken && (now - lastSpoken) < cooldownTime) {
      return;
    }

    speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = lang === 'en' ? 'en-US' : 'es-ES';

    // Find a preferred voice for English
    if (lang === 'en') {
      const voices = speechSynthesis.getVoices();
      const preferredVoice = voices.find(voice => 
        voice.lang.startsWith('en') && 
        (voice.name.includes('Google') || voice.name.includes('Microsoft'))
      );
      if (preferredVoice) {
        utterance.voice = preferredVoice;
      }
    }

    if (typeof game !== 'undefined' && game.getSetting) {
      utterance.volume = game.getSetting('ttsVolume');
      utterance.rate = game.getSetting('ttsRate');
      utterance.pitch = game.getSetting('ttsPitch');
    } else {
      utterance.volume = 0.8;
      utterance.rate = 1.0;
      utterance.pitch = 1.0;
    }

    ttsCache.messages.set(messageKey, now);

    const oneMinuteAgo = now - 60000;
    for (const [key, timestamp] of ttsCache.messages.entries()) {
      if (timestamp < oneMinuteAgo) {
        ttsCache.messages.delete(key);
      }
    }

    speechSynthesis.speak(utterance);
  }
}

/**
 * Calculate percentage with bounds
 * @param {number} value - Current value
 * @param {number} total - Total value
 * @returns {number} - Percentage between 0 and 100
 */
function calculatePercentage(value, total) {
  return Math.min(Math.max((value / total) * 100, 0), 100);
}

/**
 * Format XP number with commas
 * @param {number} xp - XP value to format
 * @returns {string} - Formatted XP string
 */
function formatXP(xp) {
  return xp.toLocaleString();
}

/**
 * Get random element from array
 * @param {Array} array - Array to get random element from
 * @returns {*} - Random element
 */
function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

/**
 * Debounce function to limit how often a function can be called
 * @param {Function} func - Function to debounce
 * @param {number} wait - Wait time in milliseconds
 * @returns {Function} - Debounced function
 */
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

/**
 * Enhanced answer validation with flexible matching
 * @param {string} userAnswer - User's answer
 * @param {string} correctAnswer - Correct answer
 * @param {number} threshold - Maximum Levenshtein distance (default: 3)
 * @returns {Object} - Validation result with details
 */
function validateAnswer(userAnswer, correctAnswer, threshold = 3) {
  const userNorm = normalize(userAnswer);
  const correctNorm = normalize(correctAnswer);
  
  // Exact match
  if (userNorm === correctNorm) {
    return { isCorrect: true, confidence: 1.0, type: 'exact' };
  }
  
  // Check if user answer contains the correct answer or vice versa
  if (correctNorm.includes(userNorm) && userNorm.length > 3) {
    return { isCorrect: true, confidence: 0.9, type: 'partial' };
  }
  
  if (userNorm.includes(correctNorm) && correctNorm.length > 3) {
    return { isCorrect: true, confidence: 0.8, type: 'partial' };
  }
  
  // Calculate Levenshtein distance
  const distance = levenshtein(userNorm, correctNorm);
  const maxLength = Math.max(userNorm.length, correctNorm.length);
  const similarity = 1 - (distance / maxLength);
  
  // Check if distance is within threshold
  if (distance <= threshold && similarity > 0.7) {
    return { 
      isCorrect: true, 
      confidence: similarity, 
      type: 'fuzzy',
      distance: distance
    };
  }
  
  // Check for common word matches (for longer sentences)
  const userWords = userNorm.split(' ').filter(word => word.length > 2);
  const correctWords = correctNorm.split(' ').filter(word => word.length > 2);
  const matchingWords = userWords.filter(word => correctWords.includes(word));
  
  if (matchingWords.length >= Math.min(2, correctWords.length)) {
    return { 
      isCorrect: true, 
      confidence: 0.7, 
      type: 'word_match',
      matchingWords: matchingWords
    };
  }
  
  return { 
    isCorrect: false, 
    confidence: similarity, 
    type: 'incorrect',
    distance: distance
  };
}

/**
 * Check if two strings are similar (for answer validation) - Legacy function
 * @param {string} userAnswer - User's answer
 * @param {string} correctAnswer - Correct answer
 * @param {number} threshold - Maximum Levenshtein distance (default: 2)
 * @returns {boolean} - Whether answers are similar enough
 */
function isSimilarAnswer(userAnswer, correctAnswer, threshold = 2) {
  const result = validateAnswer(userAnswer, correctAnswer, threshold);
  return result.isCorrect;
}

/**
 * Get current level and progress based on XP
 * @param {number} xp - Current XP
 * @returns {Object} - Level information
 */
function getLevelInfo(xp) {
  const levels = Object.keys(XP_LEVELS).map(Number).sort((a, b) => a - b);
  let currentLevel = 1;
  let nextLevel = 2;
  
  for (let i = 0; i < levels.length - 1; i++) {
    const level = levels[i];
    const nextLevelXP = XP_LEVELS[level + 1].xp;
    
    if (xp >= XP_LEVELS[level].xp && xp < nextLevelXP) {
      currentLevel = level;
      nextLevel = level + 1;
      break;
    }
  }
  
  const currentLevelInfo = XP_LEVELS[currentLevel];
  const nextLevelInfo = XP_LEVELS[nextLevel];
  
  const xpForCurrentLevel = currentLevelInfo.xp;
  const xpForNextLevel = nextLevelInfo ? nextLevelInfo.xp : xpForCurrentLevel;
  const xpProgress = xp - xpForCurrentLevel;
  const xpNeeded = xpForNextLevel - xpForCurrentLevel;
  const levelProgress = xpNeeded > 0 ? (xpProgress / xpNeeded) * 100 : 100;
  
  return {
    level: currentLevel,
    title: currentLevelInfo.title,
    xp: xp,
    xpForCurrentLevel: xpForCurrentLevel,
    xpForNextLevel: xpForNextLevel,
    xpProgress: xpProgress,
    xpNeeded: xpNeeded,
    levelProgress: Math.min(levelProgress, 100),
    isMaxLevel: currentLevel === Math.max(...levels)
  };
}

/**
 * Generate a unique ID
 * @returns {string} - Unique ID
 */
function generateId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

/**
 * Save data to localStorage
 * @param {string} key - Storage key
 * @param {*} data - Data to save
 */
function saveToStorage(key, data) {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.error('Error saving to localStorage:', error);
  }
}

/**
 * Load data from localStorage
 * @param {string} key - Storage key
 * @param {*} defaultValue - Default value if key doesn't exist
 * @returns {*} - Loaded data or default value
 */
function loadFromStorage(key, defaultValue = null) {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error('Error loading from localStorage:', error);
    return defaultValue;
  }
}

/**
 * Dark mode utilities
 */

/**
 * Get current theme from localStorage or system preference
 * @returns {string} - Current theme ('light' or 'dark')
 */
function getCurrentTheme() {
  const savedTheme = loadFromStorage('languageGame_theme');
  if (savedTheme) {
    return savedTheme;
  }
  
  // Check system preference
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    return 'dark';
  }
  
  return 'light';
}

/**
 * Set theme and save to localStorage
 * @param {string} theme - Theme to set ('light' or 'dark')
 */
function setTheme(theme) {
  document.documentElement.setAttribute('data-theme', theme);
  saveToStorage('languageGame_theme', theme);
}

/**
 * Toggle between light and dark themes
 */
function toggleTheme() {
  const currentTheme = getCurrentTheme();
  const newTheme = currentTheme === 'light' ? 'dark' : 'light';
  setTheme(newTheme);
  return newTheme;
}

/**
 * Initialize theme on page load
 */
function initializeTheme() {
  const theme = getCurrentTheme();
  setTheme(theme);
}

// Export utilities for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    normalize,
    levenshtein,
    shuffle,
    speakSpanish,
    calculatePercentage,
    formatXP,
    getRandomElement,
    debounce,
    validateAnswer,
    isSimilarAnswer,
    getLevelInfo,
    generateId,
    saveToStorage,
    loadFromStorage,
    getCurrentTheme,
    setTheme,
    toggleTheme,
    initializeTheme
  };
}
</file>

<file path="package.json">
{
  "name": "language-map-quest",
  "version": "1.0.0",
  "description": "A modern, interactive Spanish learning application with flashcards, quizzes, and call & response exercises",
  "main": "index.html",
  "scripts": {
    "start": "python -m http.server 8000",
    "dev": "python -m http.server 8000",
    "serve": "python -m http.server 8000",
    "test": "echo \"No tests specified\" && exit 0"
  },
  "keywords": [
    "spanish",
    "language-learning",
    "flashcards",
    "quiz",
    "education",
    "interactive",
    "web-app",
    "javascript",
    "html5",
    "css3"
  ],
  "author": "Language Map Quest Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/language-map-quest.git"
  },
  "bugs": {
    "url": "https://github.com/yourusername/language-map-quest/issues"
  },
  "homepage": "https://github.com/yourusername/language-map-quest#readme",
  "engines": {
    "node": ">=14.0.0"
  },
  "devDependencies": {},
  "dependencies": {},
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
</file>

<file path="README.md">
# Language Map Quest - Spanish Learning Game

A modern, interactive Spanish learning application built with vanilla JavaScript, HTML, and CSS. Learn Spanish vocabulary through flashcards, quizzes, and call & response exercises organized by thematic regions.

## 🌟 Features

### Learning Modes
- **📚 Flashcards**: Interactive flip cards with text-to-speech
- **❓ Quiz**: Multiple choice questions to test your knowledge
- **💬 Call & Response**: Type Spanish translations with smart answer validation

### Thematic Regions
- **Básicos**: Essential everyday phrases
- **Saludos**: Greetings and introductions
- **Viaje**: Travel and transportation
- **Comida**: Food and dining vocabulary
- **Emergencias**: Emergency and safety phrases
- **Compras**: Shopping and commerce
- **Salud**: Health and medical vocabulary
- **Negocios**: Business and professional vocabulary

### Progress Tracking
- XP system with points for each learned item
- Progress bars for each region
- Persistent learning state (saves to localStorage)
- Overall progress statistics

### Interactive Features
- Text-to-speech for pronunciation
- Smart answer validation with fuzzy matching
- Responsive design for all devices
- Keyboard shortcuts for quick navigation
- Smooth animations and transitions

## 🚀 Getting Started

### Prerequisites
- Modern web browser (Chrome, Firefox, Safari, Edge)
- No additional software required!

### Installation
1. Clone or download this repository
2. Open `index.html` in your web browser
3. Start learning Spanish!

### Development Setup
If you want to modify or extend the application:

```bash
# Clone the repository
git clone <repository-url>
cd language-map-quest

# Open in your preferred code editor
code .  # VS Code
# or
subl .  # Sublime Text
```

## 📁 Project Structure

```
language-map-quest/
├── index.html              # Main HTML file
├── styles/
│   ├── main.css           # Base styles and layout
│   └── components.css     # Component-specific styles
├── js/
│   ├── data.js           # Spanish vocabulary data
│   ├── utils.js          # Utility functions
│   ├── game.js           # Game logic and state management
│   ├── ui.js             # UI components and rendering
│   └── main.js           # Application initialization
└── README.md             # This file
```

## 🎮 How to Use

### Getting Started
1. **Select a Region**: Click on any colored region card on the left
2. **Choose a Mode**: Use the mode buttons (Flashcards, Quiz, Call & Response)
3. **Start Learning**: Follow the on-screen instructions for each mode

### Learning Modes

#### Flashcards Mode
- Click the card to flip between Spanish and English
- Click the 🔊 button to hear pronunciation
- Use navigation buttons or arrow keys to move between cards
- Mark cards as "Learned" to gain XP

#### Quiz Mode
- Read the English phrase
- Click the correct Spanish translation
- Get immediate feedback and XP for correct answers

#### Call & Response Mode
- Read or listen to the English phrase
- Type the Spanish translation
- Smart validation accepts close matches and partial answers

### Keyboard Shortcuts
- `1`: Switch to Flashcards mode
- `2`: Switch to Quiz mode
- `3`: Switch to Call & Response mode
- `Space`: Flip flashcard (in Flashcards mode)
- `←/→`: Navigate between flashcards

## 🛠️ Technical Details

### Architecture
- **Modular Design**: Separated concerns with dedicated files for data, logic, UI, and utilities
- **Object-Oriented**: Uses classes for game state and UI management
- **Event-Driven**: Responsive UI with event listeners and callbacks

### Data Management
- **Local Storage**: Saves progress automatically
- **State Management**: Centralized game state with the `LanguageGame` class
- **Data Structure**: Organized vocabulary by regions with metadata

### Performance Features
- **Lazy Loading**: Components render on demand
- **Efficient DOM Updates**: Minimal re-rendering
- **Memory Management**: Proper cleanup and state persistence

### Browser Compatibility
- Modern browsers with ES6+ support
- Responsive design for mobile and desktop
- Progressive Web App features (service worker ready)

## 🎯 Learning Features

### Smart Answer Validation
- **Fuzzy Matching**: Uses Levenshtein distance for typo tolerance
- **Normalization**: Removes accents and special characters for comparison
- **Partial Matching**: Accepts partial answers and synonyms

### Progress Tracking
- **XP System**: Gain points for each learned item
- **Regional Progress**: Track completion for each vocabulary region
- **Overall Statistics**: View total progress across all regions

### Accessibility
- **Keyboard Navigation**: Full keyboard support
- **Screen Reader Friendly**: Proper ARIA labels and semantic HTML
- **High Contrast**: Clear visual feedback for all interactions

## 🔧 Customization

### Adding New Vocabulary
Edit `js/data.js` to add new regions or vocabulary:

```javascript
const REGIONS = {
  newRegion: {
    name: 'New Region',
    color: '#FF6B6B',
    description: 'Description of the region',
    flashcards: [
      { front: 'Spanish phrase', back: 'English translation' },
      // ... more cards
    ]
  }
};
```

### Styling Customization
Modify CSS variables in `styles/main.css`:

```css
:root {
  --clr-primary: #your-color;
  --clr-secondary: #your-secondary-color;
  /* ... other variables */
}
```

### Adding New Learning Modes
1. Add mode logic to `js/game.js`
2. Add UI rendering to `js/ui.js`
3. Update mode switching in the UI class

## 🐛 Debugging

### Console Commands
Open browser console for debugging commands:

```javascript
// Reset all progress
debugGame.resetProgress();

// Export game data
debugGame.exportData();

// Get statistics
debugGame.getStats();
```

### Common Issues
- **Progress not saving**: Check localStorage permissions
- **Audio not working**: Ensure browser supports speech synthesis
- **Styling issues**: Check CSS variable compatibility

## 📈 Future Enhancements

### Planned Features
- [ ] Audio pronunciation for all phrases
- [ ] Spaced repetition algorithm
- [ ] Multiple language support
- [ ] Offline mode with service worker
- [ ] Social features (leaderboards, sharing)
- [ ] Advanced statistics and analytics
- [ ] Custom vocabulary import/export

### Contributing
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## 📄 License

This project is open source and available under the [MIT License](LICENSE).

## 🙏 Acknowledgments

- Spanish vocabulary curated for practical learning
- Built with modern web standards
- Inspired by gamified language learning apps
- Community feedback and suggestions welcome!

---

**Happy Learning! ¡Feliz aprendizaje!** 🎓
</file>

<file path="sw.js">
// Service Worker for Language Map Quest

const CACHE_NAME = 'language-map-quest-v1';
const urlsToCache = [
  '/',
  '/index.html',
  '/styles/main.css',
  '/styles/components.css',
  '/js/data.js',
  '/js/utils.js',
  '/js/game.js',
  '/js/ui.js',
  '/js/main.js'
];

// Install event - cache resources
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

// Fetch event - serve from cache if available
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Return cached version or fetch from network
        return response || fetch(event.request);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
</file>

<file path="styles/main.css">
/* CSS Variables */
:root {
  --clr-primary: #3b82f6;
  --clr-secondary: #1e40af;
  --clr-success: #10b981;
  --clr-warning: #f59e0b;
  --clr-error: #ef4444;
  --clr-background: #f8fafc;
  --clr-surface: #ffffff;
  --clr-text: #1e293b;
  --clr-text-muted: #64748b;
  --clr-border: #e2e8f0;
  
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
}

/* Dark Mode Variables */
[data-theme="dark"] {
  --clr-background: #0f172a;
  --clr-surface: #1e293b;
  --clr-text: #f1f5f9;
  --clr-text-muted: #94a3b8;
  --clr-border: #334155;
  
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.3);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.3), 0 2px 4px -2px rgb(0 0 0 / 0.3);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.3), 0 4px 6px -4px rgb(0 0 0 / 0.3);
}

/* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  line-height: 1.6;
  color: var(--clr-text);
  background-color: var(--clr-background);
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Layout */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-sm) var(--spacing-md);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xl);
}

/* Header */
.header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--spacing-md) 0 var(--spacing-sm);
  gap: var(--spacing-lg);
  border-bottom: 2px solid var(--clr-border);
}

.header h1 {
  font-size: 2rem;
  font-weight: 700;
  color: var(--clr-primary);
}

.header-left {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.header-right {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

.xp-info {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  font-weight: 600;
  color: var(--clr-success);
}

.xp-info progress {
  width: 80px;
  height: 6px;
  border-radius: var(--radius-sm);
  background: var(--clr-border);
  accent-color: var(--clr-primary);
}

.header-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  padding: var(--spacing-sm) var(--spacing-md);
  background: var(--clr-surface);
  border-radius: var(--radius-md);
}

.xp-display {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.xp-label {
  font-weight: 600;
  color: var(--clr-text-muted);
}

.xp-value {
  font-weight: 700;
  color: var(--clr-success);
  font-size: 1rem;
}

/* Dark Mode Toggle */
.dark-mode-toggle {
  background: var(--clr-surface);
  border: 2px solid var(--clr-border);
  border-radius: var(--radius-md);
  padding: var(--spacing-sm);
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 44px;
  height: 44px;
  font-size: 1.2rem;
}

.dark-mode-toggle:hover {
  background: var(--clr-primary);
  border-color: var(--clr-primary);
  color: white;
  transform: scale(1.05);
}

.dark-mode-toggle:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

/* Dark mode icon states */
[data-theme="dark"] .light-icon {
  display: inline;
}

[data-theme="dark"] .dark-icon {
  display: none;
}

[data-theme="light"] .light-icon,
.dark-icon {
  display: inline;
}

[data-theme="light"] .dark-icon {
  display: none;
}

/* Tab Navigation */
.tab-navigation {
  display: flex;
  gap: var(--spacing-sm);
  border-bottom: 2px solid var(--clr-border);
}

.tab-btn {
  padding: var(--spacing-md) var(--spacing-lg);
  border: none;
  background: transparent;
  color: var(--clr-text-muted);
  cursor: pointer;
  font-size: 1rem;
  font-weight: 500;
  border-radius: var(--radius-md) var(--radius-md) 0 0;
  transition: all 0.3s ease;
  position: relative;
}

.tab-btn:hover {
  color: var(--clr-primary);
  background: rgba(59, 130, 246, 0.1);
}

.tab-btn.active {
  color: var(--clr-primary);
  background: var(--clr-surface);
  border-bottom: 3px solid var(--clr-primary);
}

/* Tab Content */
.tab-content {
  flex: 1;
  min-height: 0;
}

.tab-panel {
  display: none;
  animation: fadeIn 0.3s ease-in-out;
}

.tab-panel.active {
  display: block;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Map Section */
.map-section h2 {
  margin-bottom: var(--spacing-lg);
  color: var(--clr-text);
  font-size: 1.5rem;
  font-weight: 600;
}

.map-container {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xl);
}

/* Game Section */
.game-section {
  background: var(--clr-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  overflow: hidden;
}

.panel-header {
  padding: var(--spacing-md);
  border-bottom: 1px solid var(--clr-border);
  background: var(--clr-surface);
  color: var(--clr-text);
  display: flex;
  flex-direction: column;
  align-items: center;
}

.panel-header h3 {
  margin-bottom: var(--spacing-md);
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--clr-primary);
}

.mode-buttons {
  display: flex;
  gap: var(--spacing-sm);
  flex-wrap: wrap;
}

.mode-btn {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: 1px solid var(--clr-border);
  border-radius: var(--radius-sm);
  background: transparent;
  color: var(--clr-text-muted);
  cursor: pointer;
  font-size: .9rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.mode-btn:hover {
  background: var(--clr-background);
  border-color: var(--clr-primary);
  color: var(--clr-primary);
}

.mode-btn.active {
  background: var(--clr-primary);
  color: white;
  border-color: var(--clr-primary);
}

.mode-btn:focus {
  outline: 3px solid var(--clr-primary);
  outline-offset: 2px;
}

.panel-body {
  padding: var(--spacing-sm);
  min-height: auto;
  flex: 1 1 auto;
}

.placeholder-text {
  color: var(--clr-text-muted);
  font-size: 1.1rem;
  text-align: center;
}

/* Progress Section */
.progress-section {
  background: var(--clr-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  padding: var(--spacing-lg);
}

.progress-section h3 {
  margin-bottom: var(--spacing-lg);
  color: var(--clr-text);
  font-size: 1.25rem;
  font-weight: 600;
}

.progress-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--spacing-md);
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: var(--spacing-sm);
    gap: var(--spacing-lg);
  }
  
  .header {
    flex-direction: column;
    gap: var(--spacing-md);
    text-align: center;
  }
  
  .header h1 {
    font-size: 1.5rem;
  }
  
  .header-controls {
    width: 100%;
    justify-content: center;
    gap: var(--spacing-sm);
  }
  
  .tab-navigation {
    flex-direction: column;
    gap: 0;
  }
  
  .tab-btn {
    border-radius: 0;
    text-align: left;
    padding: var(--spacing-md);
  }
  
  .tab-btn.active {
    color: var(--clr-primary);
    background: var(--clr-surface);
    border-bottom: 3px solid var(--clr-primary);
  }
  
  .mode-buttons {
    justify-content: center;
  }
  
  .category-grid {
    grid-template-columns: 1fr;
  }
  
  .progress-container {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="test_multiword.html">
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-word Phrase Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            line-height: 1.6;
        }

        .test-container {
            max-width: 800px;
            margin: 0 auto;
            background: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
        }

        .clickable-word {
            cursor: pointer;
            color: inherit;
            transition: all 0.2s ease;
            border-radius: 2px;
            padding: 1px 2px;
        }

        .clickable-word:hover {
            background: rgba(59, 130, 246, 0.1);
            transform: translateY(-1px);
        }

        .clickable-word.multi-word-phrase {
            border-bottom: 2px dotted rgba(59, 130, 246, 0.6);
            padding: 2px 4px;
            margin: 0 1px;
            background: rgba(59, 130, 246, 0.05);
        }

        .clickable-word.multi-word-phrase:hover {
            background: rgba(59, 130, 246, 0.15);
            border-bottom-color: #3b82f6;
            border-bottom-style: solid;
        }

        .test-result {
            margin-top: 20px;
            padding: 10px;
            background: white;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .test-case {
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: white;
        }

        .test-case h4 {
            margin: 0 0 10px 0;
            color: #333;
        }

        .original {
            color: #666;
            font-style: italic;
            margin-bottom: 8px;
        }

        .result {
            font-size: 1.1em;
            line-height: 1.4;
        }
    </style>
</head>

<body>
    <div class="test-container">
        <h1>Multi-word Phrase Test</h1>
        <p>Testing the makeWordsClickable function with multi-word phrases and proper spacing:</p>

        <div id="test-output" class="test-result">
            <!-- Test results will appear here -->
        </div>

        <div id="click-result" class="test-result" style="display: none;">
            <strong>Clicked word:</strong> <span id="clicked-word"></span><br>
            <strong>Explanation:</strong> <span id="clicked-explanation"></span>
        </div>
    </div>

    <script>
        // Updated version of the makeWordsClickable function with proper spacing
        function makeWordsClickable(text, breakdown = {}) {
            if (!breakdown || Object.keys(breakdown).length === 0) {
                return text;
            }

            let processedText = text;

            // First, identify and process multi-word phrases
            const sortedKeys = Object.keys(breakdown).sort((a, b) => b.length - a.length);

            sortedKeys.forEach(phrase => {
                if (phrase.includes(' ')) {
                    const explanation = breakdown[phrase];
                    const escapedPhrase = phrase.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                    const regex = new RegExp(`\\b${escapedPhrase}\\b`, 'gi');

                    processedText = processedText.replace(regex, (match) => {
                        return `<span class="clickable-word multi-word-phrase" data-word="${phrase}" data-explanation="${explanation}">${match}</span>`;
                    });
                }
            });

            // Then process individual words that haven't been wrapped yet
            // Use a more careful approach that preserves spacing
            const tokens = processedText.split(/(\s+)/); // Split only on whitespace, preserve spaces

            const result = tokens.map(token => {
                // If it's just whitespace, return as-is
                if (/^\s+$/.test(token)) {
                    return token;
                }

                // If it already contains a span (already processed), return as-is
                if (token.includes('<span')) {
                    return token;
                }

                // Split the token by punctuation while preserving the punctuation
                const parts = token.split(/([.,!?;:])/);

                return parts.map(part => {
                    if (!part || /^[.,!?;:]$/.test(part)) {
                        return part; // Return punctuation as-is
                    }

                    const cleanPart = part.trim();
                    if (!cleanPart) {
                        return part;
                    }

                    // Check if this individual word exists in breakdown (and isn't a multi-word phrase)
                    const explanation = breakdown[cleanPart] || breakdown[part];
                    if (explanation && !cleanPart.includes(' ')) {
                        return `<span class="clickable-word" data-word="${cleanPart}" data-explanation="${explanation}">${part}</span>`;
                    }

                    return part; // Return part as-is if no explanation
                }).join('');
            }).join('');

            return result;
        }

        // Test data
        const testCases = [
            {
                text: 'Nos vemos más tarde.',
                breakdown: {
                    'Nos': 'us',
                    'vemos': 'we see',
                    'más tarde': 'later',
                    'más': 'more',
                    'tarde': 'late'
                }
            },
            {
                text: 'Voy a llegar más tarde de lo normal.',
                breakdown: {
                    'Voy a': 'I am going to',
                    'llegar': 'arrive',
                    'más tarde': 'later',
                    'de lo normal': 'than usual',
                    'más': 'more',
                    'tarde': 'late',
                    'de': 'of',
                    'lo': 'the',
                    'normal': 'normal'
                }
            },
            {
                text: 'Soy alérgico a los frutos secos.',
                breakdown: {
                    'Soy': 'I am',
                    'alérgico': 'allergic',
                    'a': 'to',
                    'los': 'the',
                    'frutos secos': 'nuts'
                }
            },
            {
                text: '¿Viajarás durante las vacaciones?',
                breakdown: {
                    '¿Viajarás': 'Will you travel',
                    'durante': 'during',
                    'las vacaciones': 'the holidays',
                    'las': 'the',
                    'vacaciones': 'holidays'
                }
            },
            {
                text: '¿Te gusta ver películas?',
                breakdown: {
                    '¿Te gusta': 'Do you like',
                    'ver': 'to watch',
                    'películas': 'movies'
                }
            }
        ];

        // Run tests
        const outputDiv = document.getElementById('test-output');
        let testResults = '<h3>Test Results:</h3>';

        testCases.forEach((testCase, index) => {
            const result = makeWordsClickable(testCase.text, testCase.breakdown);
            testResults += `
                <div class="test-case">
                    <h4>Test ${index + 1}:</h4>
                    <div class="original"><strong>Original:</strong> ${testCase.text}</div>
                    <div class="result"><strong>Result:</strong> ${result}</div>
                </div>
            `;
        });

        outputDiv.innerHTML = testResults;

        // Add click handlers
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('clickable-word')) {
                const word = e.target.dataset.word;
                const explanation = e.target.dataset.explanation;

                document.getElementById('clicked-word').textContent = word;
                document.getElementById('clicked-explanation').textContent = explanation;
                document.getElementById('click-result').style.display = 'block';
            }
        });
    </script>
</body>

</html>
</file>

<file path="js/data.js">
// Spanish Learning Data - Organized by Regions with Sentences

const REGIONS = {
  basics: {
    name: 'Básicos',
    emoji: '🌟',
    color: '#F87171',
    category: 'Fundamentos',
    description: 'Essential phrases for everyday communication - Use these when you need to be polite, ask for help, or express basic needs in any situation.',
    flashcards: [
      { 
        front: 'Sí, por favor.', 
        back: 'Yes, please.',
        context: 'Use when agreeing to something politely, like accepting a drink or an offer.',
        grammar: 'Sí = Yes, por favor = please (polite request marker)',
        breakdown: { 'Sí': 'Yes', 'por': 'for', 'favor': 'favor', 'por favor': 'please' }
      },
      { 
        front: 'No, gracias.', 
        back: 'No, thank you.',
        context: 'Use when politely declining something, like more food or a sales offer.',
        grammar: 'No = No, gracias = thank you (polite decline)',
        breakdown: { 'No': 'No', 'gracias': 'thank you' }
      },
      { 
        front: 'Por favor, ayúdame.', 
        back: 'Please help me.',
        context: 'A direct request for assistance when you are in need.',
        grammar: 'Imperative form: ayúdame = help me (command)',
        breakdown: { 'Por favor': 'please', 'ayúda': 'help (imperative)', 'me': 'me', 'ayúdame': 'help me' }
      },
      { 
        front: 'Gracias por tu ayuda.', 
        back: 'Thank you for your help.',
        context: 'Use to express gratitude after someone has assisted you.',
        grammar: 'Gracias por + noun = Thank you for + noun',
        breakdown: { 'Gracias': 'thank you', 'por': 'for', 'tu': 'your (informal)', 'ayuda': 'help (noun)' }
      },
      { 
        front: 'De nada, es un placer.', 
        back: "You're welcome, it's a pleasure.",
        context: 'A warm response to "thank you," implying you enjoyed helping.',
        grammar: 'De nada = You\'re welcome, es = is (ser verb)',
        breakdown: { 'De nada': "you're welcome", 'es': 'is', 'un': 'a', 'placer': 'pleasure' }
      },
      {
        front: 'Lo siento mucho.',
        back: "I'm very sorry.",
        context: 'Use to apologize sincerely for a mistake or a sad event.',
        grammar: 'Lo siento = I feel it (common way to say sorry)',
        breakdown: { 'Lo': 'it', 'siento': 'I feel', 'mucho': 'very/a lot' }
      },
      {
        front: 'No entiendo.',
        back: "I don't understand.",
        context: 'Essential phrase when you don\'t comprehend what someone said.',
        grammar: 'No = negation, entiendo = I understand (entender verb)',
        breakdown: { 'No': 'not', 'entiendo': 'I understand' }
      },
      {
        front: '¿Puede repetir, por favor?',
        back: 'Can you repeat, please? (formal)',
        context: 'Use when you need someone to say something again, addressing them formally.',
        grammar: 'Puede = Can you (formal, poder verb), repetir = to repeat',
        breakdown: { '¿Puede': 'Can you (formal)', 'repetir': 'to repeat', 'por favor?': 'please?' }
      },
      {
        front: '¿Hablas inglés?',
        back: 'Do you speak English? (informal)',
        context: 'Use when asking a peer if they can communicate in English.',
        grammar: 'Hablas = you speak (hablar verb, tú form)',
        breakdown: { '¿Hablas': 'Do you speak', 'inglés?': 'English?' }
      }
    ]
  },
  greetings: {
    name: 'Saludos',
    emoji: '👋',
    color: '#F59E0B',
    category: 'Fundamentos',
    description: 'Greetings and introductions - Use these when meeting people, starting conversations, or being polite in social situations.',
    flashcards: [
      { 
        front: '¡Hola! ¿Cómo estás?', 
        back: 'Hello! How are you? (informal)',
        context: 'A friendly, common greeting for friends, family, or peers.',
        grammar: '¿Cómo estás? = How are you? (estar verb, tú form)',
        breakdown: { '¡Hola!': 'Hello!', '¿Cómo': 'How', 'estás': 'are you (informal)' }
      },
      { 
        front: 'Buenos días, señora.', 
        back: 'Good morning, ma\'am.',
        context: 'A formal and polite morning greeting.',
        grammar: 'Buenos días = Good morning',
        breakdown: { 'Buenos': 'good', 'días': 'days', 'señora': 'ma\'am/Mrs.' }
      },
      {
        front: 'Buenas tardes.',
        back: 'Good afternoon.',
        context: 'A standard greeting used from midday until the evening.',
        grammar: 'Plural adjective + noun greeting.',
        breakdown: { 'Buenas': 'good', 'tardes': 'afternoons' }
      },
      {
        front: 'Buenas noches.',
        back: 'Good evening / Good night.',
        context: 'Used both as a greeting in the evening and to say goodbye before bed.',
        grammar: 'Plural adjective + noun greeting.',
        breakdown: { 'Buenas': 'good', 'noches': 'nights' }
      },
      { 
        front: 'Mucho gusto en conocerte.', 
        back: 'Nice to meet you.',
        context: 'A standard and friendly phrase when first introduced to someone.',
        grammar: 'Mucho gusto = a lot of pleasure, en conocerte = in meeting you',
        breakdown: { 'Mucho': 'much', 'gusto': 'pleasure', 'en': 'in', 'conocerte': 'meeting you' }
      },
      {
        front: 'Me llamo...',
        back: 'My name is...',
        context: 'Use to introduce yourself.',
        grammar: 'Literally "I call myself..."',
        breakdown: { 'Me': 'myself', 'llamo': 'I call' }
      },
      {
        front: 'Hasta luego.',
        back: 'See you later.',
        context: 'A common way to say goodbye when you expect to see the person again.',
        grammar: 'Hasta = until, luego = later',
        breakdown: { 'Hasta': 'until', 'luego': 'later' }
      },
      {
        front: 'Nos vemos más tarde.',
        back: 'See you later.',
        context: 'Another way to say goodbye, literally meaning "we see each other later".',
        grammar: 'Nos vemos = we see each other (reflexive)',
        breakdown: { 'Nos': 'us', 'vemos': 'we see', 'más tarde': 'later', 'más': 'more', 'tarde': 'late' }
      },
      {
        front: 'Adiós, que te vaya bien.',
        back: 'Goodbye, take care. / I hope it goes well for you.',
        context: 'A warm and kind way to say goodbye.',
        grammar: 'Que te vaya bien = Subjunctive mood wishing someone well.',
        breakdown: { 'Adiós': 'Goodbye', 'que': 'that', 'te': 'to you', 'vaya': 'it goes (subjunctive)', 'bien': 'well' }
      }
    ]
  },
  travel: {
    name: 'Viaje',
    emoji: '✈️',
    color: '#10B981',
    category: 'Situaciones',
    description: 'Travel and transportation vocabulary - Use these when navigating airports, train stations, hotels, and asking for directions while traveling.',
    flashcards: [
      { 
        front: '¿Dónde está la estación de tren?', 
        back: 'Where is the train station?',
        context: 'Use when looking for the train station in a new city.',
        grammar: '¿Dónde está? = Where is? (for location)',
        breakdown: { '¿Dónde': 'Where', 'está': 'is', 'la': 'the', 'estación': 'station', 'de': 'of', 'tren': 'train' }
      },
      { 
        front: 'Quisiera un boleto para Madrid.', 
        back: 'I would like a ticket to Madrid.',
        context: 'A polite way to request a ticket at a counter.',
        grammar: 'Quisiera = I would like (conditional tense of querer)',
        breakdown: { 'Quisiera': 'I would like', 'un': 'a', 'boleto': 'ticket', 'para': 'for/to', 'Madrid': 'Madrid' }
      },
      {
        front: '¿A qué hora sale el próximo avión?',
        back: 'What time does the next plane leave?',
        context: 'Use at the airport to ask about departure times.',
        grammar: '¿A qué hora? = At what time?, sale = it leaves (salir verb)',
        breakdown: { '¿A qué hora': 'At what time', 'sale': 'leaves', 'el': 'the', 'próximo': 'next', 'avión?': 'plane?' }
      },
      {
        front: 'Tengo una reservación a nombre de...',
        back: 'I have a reservation under the name of...',
        context: 'Use when checking into a hotel.',
        grammar: 'Tengo = I have (tener verb), a nombre de = under the name of',
        breakdown: { 'Tengo': 'I have', 'una': 'a', 'reservación': 'reservation', 'a nombre de': 'under the name of...' }
      },
      {
        front: '¿Cuánto cuesta un taxi al centro?',
        back: 'How much does a taxi to the downtown cost?',
        context: 'Asking a taxi driver for a fare estimate.',
        grammar: '¿Cuánto cuesta? = How much does it cost?',
        breakdown: { '¿Cuánto': 'How much', 'cuesta': 'does it cost', 'un': 'a', 'taxi': 'taxi', 'al': 'to the', 'centro?': 'downtown?' }
      },
      {
        front: 'El viaje fue muy largo.',
        back: 'The trip was very long.',
        context: 'Commenting on the duration of a journey.',
        grammar: 'Fue = was (ser verb, preterite tense)',
        breakdown: { 'El': 'the', 'viaje': 'trip', 'fue': 'was', 'muy': 'very', 'largo': 'long' }
      }
    ]
  },
  food: {
    name: 'Comida',
    emoji: '🍽️',
    color: '#3B82F6',
    category: 'Situaciones',
    description: 'Food and dining vocabulary - Use these in restaurants, cafes, and when discussing food preferences or dietary needs.',
    flashcards: [
      { 
        front: 'La cuenta, por favor.', 
        back: 'The check, please.',
        context: 'The most common way to ask for the bill in a restaurant.',
        grammar: 'La cuenta = The bill/check',
        breakdown: { 'La': 'the', 'cuenta': 'check/bill', 'por favor': 'please' }
      },
      { 
        front: '¿Qué me recomienda?', 
        back: 'What do you recommend?',
        context: 'Ask the waiter for their suggestion on what to order.',
        grammar: 'Recomienda = you recommend (recomendar verb, usted form)',
        breakdown: { '¿Qué': 'What', 'me': 'to me', 'recomienda?': 'do you recommend?' }
      },
      {
        front: 'Soy alérgico/a a los frutos secos.',
        back: 'I am allergic to nuts.',
        context: 'Crucial phrase to communicate a food allergy. Use "alérgico" for male, "alérgica" for female.',
        grammar: 'Soy = I am (ser verb), alérgico/a = allergic',
        breakdown: { 'Soy': 'I am', 'alérgico/a': 'allergic', 'a': 'to', 'los': 'the', 'frutos secos': 'nuts' }
      },
      {
        front: 'Voy a llegar más tarde de lo normal.',
        back: 'I am going to arrive later than usual.',
        context: 'Informing someone that you will be delayed.',
        grammar: 'Voy a + infinitive = I am going to (near future)',
        breakdown: { 'Voy a': 'I am going to', 'llegar': 'arrive', 'más tarde': 'later', 'de lo normal': 'than usual', 'más': 'more', 'tarde': 'late', 'de': 'of', 'lo': 'the', 'normal': 'normal' }
      },
      {
        front: '¡La comida estuvo deliciosa!',
        back: 'The food was delicious!',
        context: 'A compliment to the chef or host after a meal.',
        grammar: 'Estuvo = was (estar verb, preterite tense)',
        breakdown: { '¡La': 'The', 'comida': 'food', 'estuvo': 'was', 'deliciosa!': 'delicious!' }
      },
      {
        front: 'Quisiera una mesa para dos personas.',
        back: 'I would like a table for two people.',
        context: 'Use when arriving at a restaurant to request a table.',
        grammar: 'Quisiera = I would like (conditional)',
        breakdown: { 'Quisiera': 'I would like', 'una': 'a', 'mesa': 'table', 'para': 'for', 'dos': 'two', 'personas': 'people' }
      },
      { 
        front: 'Tengo hambre, ¿dónde podemos comer?', 
        back: "I'm hungry, where can we eat?",
        context: 'Expressing hunger and asking for suggestions on where to eat.',
        grammar: 'Tengo hambre = I have hunger (idiomatic expression)',
        breakdown: { 'Tengo hambre': "I'm hungry", '¿dónde': 'where', 'podemos': 'can we', 'comer?': 'to eat?' }
      }
    ]
  },
  shopping: {
    name: 'Compras',
    emoji: '🛍️',
    color: '#8B5CF6',
    category: 'Situaciones',
    description: 'Shopping and commerce vocabulary - Use these in stores, markets, and when making purchases or asking about products.',
    flashcards: [
      { 
        front: '¿Cuánto cuesta esto?', 
        back: 'How much does this cost?',
        context: 'The simplest way to ask for the price of an item.',
        grammar: '¿Cuánto cuesta? = How much does it cost?',
        breakdown: { '¿Cuánto': 'How much', 'cuesta': 'does it cost', 'esto?': 'this?' }
      },
      { 
        front: '¿Aceptan tarjetas de crédito?', 
        back: 'Do you accept credit cards?',
        context: 'A common question before paying for goods or services.',
        grammar: '¿Aceptan? = Do you (plural/formal) accept?',
        breakdown: { '¿Aceptan': 'Do you accept', 'tarjetas': 'cards', 'de': 'of', 'crédito?': 'credit?' }
      },
      {
        front: 'Solo estoy mirando, gracias.',
        back: "I'm just looking, thank you.",
        context: 'A polite way to respond to a salesperson offering help.',
        grammar: 'Estoy mirando = I am looking (present continuous)',
        breakdown: { 'Solo': 'only/just', 'estoy': 'I am', 'mirando': 'looking', 'gracias': 'thank you' }
      },
      {
        front: '¿Puedo probármelo?',
        back: 'Can I try it on?',
        context: 'Use in a clothing store when you want to try on an item.',
        grammar: 'Puedo = Can I (poder verb), probármelo = to try it on myself',
        breakdown: { '¿Puedo': 'Can I', 'probar': 'to try', 'me': 'myself', 'lo': 'it', 'probármelo?': 'try it on?' }
      },
      {
        front: '¿Tiene esto en una talla más grande/pequeña?',
        back: 'Do you have this in a bigger/smaller size?',
        context: 'Asking for a different size of a clothing item.',
        grammar: 'Tiene = Do you have (formal)',
        breakdown: { '¿Tiene': 'Do you have', 'esto': 'this', 'en': 'in', 'una talla': 'a size', 'más': 'more', 'grande/pequeña?': 'big/small?' }
      },
      {
        front: 'Lo llevo.',
        back: "I'll take it.",
        context: 'A simple phrase to confirm you are buying an item.',
        grammar: 'Lo = it, llevo = I take (llevar verb)',
        breakdown: { 'Lo': 'it', 'llevo': "I'll take" }
      }
    ]
  },
  directions: {
    name: 'Direcciones',
    emoji: '🧭',
    color: '#0EA5E9',
    category: 'Situaciones',
    description: 'Navigating and asking for directions - Use these phrases when you are lost or trying to find a specific location.',
    flashcards: [
      {
        front: 'Estoy perdido/a. ¿Me puede ayudar?',
        back: "I'm lost. Can you help me?",
        context: 'The essential first phrase when you need help with directions. Use "perdido" for male, "perdida" for female.',
        grammar: 'Estoy = I am (location/state), perdido/a = lost',
        breakdown: { 'Estoy': 'I am', 'perdido/a': 'lost', '¿Me puede': 'Can you', 'ayudar?': 'help me?' }
      },
      {
        front: 'Siga todo recto por dos cuadras.',
        back: 'Go straight ahead for two blocks.',
        context: 'Understanding a common direction given by locals.',
        grammar: 'Siga = Go (imperative, usted form), recto = straight',
        breakdown: { 'Siga': 'Go (formal)', 'todo recto': 'straight ahead', 'por': 'for', 'dos': 'two', 'cuadras': 'blocks' }
      },
      {
        front: 'Gire a la derecha en el próximo semáforo.',
        back: 'Turn right at the next traffic light.',
        context: 'A specific instruction for turning.',
        grammar: 'Gire = Turn (imperative, usted form)',
        breakdown: { 'Gire': 'Turn (formal)', 'a la derecha': 'to the right', 'en el': 'at the', 'próximo': 'next', 'semáforo': 'traffic light' }
      },
      {
        front: '¿Cómo llego al museo?',
        back: 'How do I get to the museum?',
        context: 'A direct question to ask for directions to a place.',
        grammar: '¿Cómo llego? = How do I arrive? (llegar verb)',
        breakdown: { '¿Cómo': 'How', 'llego': 'do I get/arrive', 'al': 'to the', 'museo?': 'museum?' }
      },
      {
        front: 'Está a la vuelta de la esquina.',
        back: "It's just around the corner.",
        context: 'A common response indicating something is very close.',
        grammar: 'Está = It is (location)',
        breakdown: { 'Está': 'It is', 'a la vuelta de': 'around', 'la esquina': 'the corner' }
      }
    ]
  },
  weather: {
    name: 'El Clima',
    emoji: '🌤️',
    color: '#F472B6',
    category: 'Conversación',
    description: 'Talking about the weather - Use these common phrases to describe or ask about meteorological conditions.',
    flashcards: [
      {
        front: '¿Qué tiempo hace hoy?',
        back: "What's the weather like today?",
        context: 'The most common way to ask about the weather.',
        grammar: 'Hace tiempo = it makes weather (idiomatic)',
        breakdown: { '¿Qué': 'What', 'tiempo': 'weather', 'hace': 'does it do/make', 'hoy?': 'today?' }
      },
      {
        front: 'Hace mucho calor.',
        back: "It's very hot.",
        context: 'Describing a hot day.',
        grammar: 'Hacer verb is used for general weather conditions.',
        breakdown: { 'Hace': 'It is', 'mucho': 'a lot of', 'calor': 'heat' }
      },
      {
        front: 'Está lloviendo.',
        back: "It's raining.",
        context: 'Describing current precipitation.',
        grammar: 'Estar + gerund (present progressive) for ongoing actions.',
        breakdown: { 'Está': 'It is', 'lloviendo': 'raining' }
      },
      {
        front: 'Mañana va a estar soleado.',
        back: 'Tomorrow is going to be sunny.',
        context: 'Talking about the weather forecast for the next day.',
        grammar: 'Ir + a + infinitive for the near future.',
        breakdown: { 'Mañana': 'Tomorrow', 'va a estar': 'is going to be', 'soleado': 'sunny' }
      },
      {
        front: 'Hay nubes pero no llueve.',
        back: "It's cloudy but it's not raining.",
        context: 'Describing an overcast day without rain.',
        grammar: 'Hay = There is/are, no llueve = it does not rain',
        breakdown: { 'Hay': 'There are', 'nubes': 'clouds', 'pero': 'but', 'no': 'not', 'llueve': 'it rains' }
      }
    ]
  },
  health: {
    name: 'Salud',
    emoji: '🏥',
    color: '#14B8A6',
    category: 'Situaciones',
    description: 'Health and medical vocabulary - Use these when visiting doctors, pharmacies, or describing health problems.',
    flashcards: [
      { 
        front: 'Me duele la cabeza.', 
        back: 'My head hurts. / I have a headache.',
        context: 'A common way to describe pain to a doctor or friend.',
        grammar: 'Doler verb structure: (indirect object) + duele/duelen + (body part)',
        breakdown: { 'Me': 'to me', 'duele': 'it hurts', 'la': 'the', 'cabeza': 'head' }
      },
      {
        front: 'Necesito una cita con el doctor.',
        back: 'I need an appointment with the doctor.',
        context: 'Use when calling a clinic or hospital to schedule a visit.',
        grammar: 'Necesito = I need (necesitar verb)',
        breakdown: { 'Necesito': 'I need', 'una': 'an', 'cita': 'appointment', 'con': 'with', 'el': 'the', 'doctor': 'doctor' }
      },
      {
        front: 'Tengo fiebre y tos.',
        back: 'I have a fever and a cough.',
        context: 'Describing common symptoms of illness.',
        grammar: 'Tener verb is used for symptoms.',
        breakdown: { 'Tengo': 'I have', 'fiebre': 'fever', 'y': 'and', 'tos': 'cough' }
      },
      { 
        front: '¿Dónde está la farmacia más cercana?', 
        back: 'Where is the nearest pharmacy?',
        context: 'Asking for the location of a pharmacy to buy medicine.',
        grammar: 'más cercana = nearest (superlative)',
        breakdown: { '¿Dónde está': 'Where is', 'la': 'the', 'farmacia': 'pharmacy', 'más': 'most', 'cercana?': 'near?' }
      },
      {
        front: 'Me siento mareado/a.',
        back: 'I feel dizzy.',
        context: 'Describing a feeling of dizziness or lightheadedness. Use "mareado" for male, "mareada" for female.',
        grammar: 'Me siento = I feel (sentirse verb, reflexive)',
        breakdown: { 'Me': 'myself', 'siento': 'I feel', 'mareado/a': 'dizzy' }
      }
    ]
  },
  family: {
    name: 'Familia',
    emoji: '👨‍👩‍👧‍👦',
    color: '#A78BFA',
    category: 'Conversación',
    description: 'Talking about family - Phrases to introduce, describe, and ask about family members.',
    flashcards: [
        {
            front: 'Esta es mi familia.',
            back: 'This is my family.',
            context: 'Introducing your family to someone.',
            grammar: 'Esta = This (feminine demonstrative pronoun)',
            breakdown: { 'Esta': 'This', 'es': 'is', 'mi': 'my', 'familia': 'family' }
        },
        {
            front: 'Tengo dos hermanos y una hermana.',
            back: 'I have two brothers and one sister.',
            context: 'Describing your siblings.',
            grammar: 'Tengo = I have (tener verb)',
            breakdown: { 'Tengo': 'I have', 'dos': 'two', 'hermanos': 'brothers', 'y': 'and', 'una': 'one', 'hermana': 'sister' }
        },
        {
            front: 'Mis padres viven en México.',
            back: 'My parents live in Mexico.',
            context: 'Sharing where your parents reside.',
            grammar: 'Mis = my (plural), viven = they live (vivir verb)',
            breakdown: { 'Mis': 'My', 'padres': 'parents', 'viven': 'they live', 'en': 'in', 'México': 'Mexico' }
        },
        {
            front: '¿Cuántos años tiene tu abuelo?',
            back: 'How old is your grandfather?',
            context: 'Asking about the age of a family member.',
            grammar: '¿Cuántos años tiene? = How many years does he/she have? (idiomatic for age)',
            breakdown: { '¿Cuántos': 'How many', 'años': 'years', 'tiene': 'does he have', 'tu': 'your', 'abuelo?': 'grandfather?' }
        },
        {
            front: 'Mi esposa es abogada.',
            back: 'My wife is a lawyer.',
            context: 'Describing your spouse\'s profession. Note: no "una" before professions.',
            grammar: 'Ser + profession (no article needed)',
            breakdown: { 'Mi': 'My', 'esposa': 'wife', 'es': 'is', 'abogada': 'lawyer' }
        }
    ]
  },
  hobbies: {
    name: 'Pasatiempos',
    emoji: '🎨',
    color: '#FB923C',
    category: 'Conversación',
    description: 'Discussing hobbies and leisure activities - What you like to do in your free time.',
    flashcards: [
        {
            front: 'En mi tiempo libre, me gusta leer.',
            back: 'In my free time, I like to read.',
            context: 'Sharing one of your hobbies.',
            grammar: 'Me gusta + infinitive = I like to (do something)',
            breakdown: { 'En': 'In', 'mi': 'my', 'tiempo libre': 'free time', 'me gusta': 'I like', 'leer': 'to read' }
        },
        {
            front: '¿Te gusta ver películas?',
            back: 'Do you like to watch movies?',
            context: 'Asking someone about their interest in movies.',
            grammar: '¿Te gusta...? = Do you like...?',
            breakdown: { '¿Te gusta': 'Do you like', 'ver': 'to watch', 'películas': 'movies' }
        },
        {
            front: 'Mi pasatiempo favorito es tocar la guitarra.',
            back: 'My favorite hobby is playing the guitar.',
            context: 'Specifying your favorite pastime.',
            grammar: 'Tocar is used for playing instruments.',
            breakdown: { 'Mi': 'My', 'pasatiempo': 'hobby', 'favorito': 'favorite', 'es': 'is', 'tocar': 'to play', 'la guitarra': 'the guitar' }
        },
        {
            front: 'Los fines de semana, salgo con mis amigos.',
            back: 'On weekends, I go out with my friends.',
            context: 'Describing your typical weekend activity.',
            grammar: 'Salgo = I go out (salir verb, irregular yo form)',
            breakdown: { 'Los fines de semana': 'On weekends', 'salgo': 'I go out', 'con': 'with', 'mis': 'my', 'amigos': 'friends' }
        },
        {
            front: '¿Practicas algún deporte?',
            back: 'Do you play any sports?',
            context: 'Asking someone if they are involved in sports.',
            grammar: 'Practicar is often used for playing sports.',
            breakdown: { '¿Practicas': 'Do you practice/play', 'algún': 'any', 'deporte?': 'sport?' }
        }
    ]
  },
  pastTensePreterite: {
    name: 'Pasado (Pretérito)',
    emoji: '⏰',
    color: '#60A5FA',
    category: 'Gramática',
    description: 'Talking about the past using the Preterite tense, for completed actions.',
    flashcards: [
      {
        front: 'Ayer comí paella por primera vez.',
        back: 'Yesterday I ate paella for the first time.',
        context: 'Describing a specific, completed action in the past.',
        grammar: 'Comí = I ate (comer verb, preterite)',
        breakdown: { 'Ayer': 'Yesterday', 'comí': 'I ate', 'paella': 'paella', 'por primera vez': 'for the first time' }
      },
      {
        front: 'El año pasado viajamos a España.',
        back: 'Last year we traveled to Spain.',
        context: 'Recounting a past trip.',
        grammar: 'Viajamos = We traveled (viajar verb, preterite)',
        breakdown: { 'El año pasado': 'Last year', 'viajamos': 'we traveled', 'a': 'to', 'España': 'Spain' }
      },
      {
        front: '¿Qué hiciste el fin de semana?',
        back: 'What did you do over the weekend?',
        context: 'A common question to start a conversation on Monday.',
        grammar: 'Hiciste = you did (hacer verb, irregular preterite)',
        breakdown: { '¿Qué': 'What', 'hiciste': 'did you do', 'el fin de semana?': 'the weekend?' }
      },
      {
        front: 'Ella terminó su trabajo a las cinco.',
        back: 'She finished her work at five.',
        context: 'Stating when a task was completed.',
        grammar: 'Terminó = She/he finished (terminar verb, preterite)',
        breakdown: { 'Ella': 'She', 'terminó': 'finished', 'su': 'her', 'trabajo': 'work', 'a las cinco': 'at five' }
      },
      {
        front: 'Anoche vi una película interesante.',
        back: 'Last night I saw an interesting movie.',
        context: 'Talking about an activity from the previous night.',
        grammar: 'Vi = I saw (ver verb, irregular preterite)',
        breakdown: { 'Anoche': 'Last night', 'vi': 'I saw', 'una': 'an', 'película': 'movie', 'interesante': 'interesting' }
      }
    ]
  },
  futureTense: {
    name: 'Futuro',
    emoji: '🔮',
    color: '#F472B6',
    category: 'Gramática',
    description: 'Talking about the future - Phrases for plans, predictions, and upcoming events.',
    flashcards: [
      {
        front: 'Mañana estudiaré para el examen.',
        back: 'Tomorrow I will study for the exam.',
        context: 'Stating a definite plan for tomorrow using the simple future tense.',
        grammar: 'Estudiaré = I will study (future tense of estudiar)',
        breakdown: { 'Mañana': 'Tomorrow', 'estudiaré': 'I will study', 'para': 'for', 'el': 'the', 'examen': 'exam' }
      },
      {
        front: 'El próximo mes, compraremos un coche nuevo.',
        back: 'Next month, we will buy a new car.',
        context: 'Talking about a significant future purchase.',
        grammar: 'Compraremos = We will buy (future tense of comprar)',
        breakdown: { 'El próximo mes': 'Next month', 'compraremos': 'we will buy', 'un': 'a', 'coche': 'car', 'nuevo': 'new' }
      },
      {
        front: '¿Viajarás durante las vacaciones?',
        back: 'Will you travel during the holidays?',
        context: 'Asking about someone\'s vacation plans.',
        grammar: 'Viajarás = You will travel (future tense of viajar, tú form)',
        breakdown: { '¿Viajarás': 'Will you travel', 'durante': 'during', 'las vacaciones': 'the holidays', 'las': 'the', 'vacaciones': 'holidays' }
      },
      {
        front: 'Creo que lloverá más tarde.',
        back: 'I think it will rain later.',
        context: 'Making a prediction about the weather.',
        grammar: 'Lloverá = It will rain (future tense of llover)',
        breakdown: { 'Creo que': 'I think that', 'lloverá': 'it will rain', 'más tarde': 'later' }
      },
      {
        front: '¿Qué harás después de la universidad?',
        back: 'What will you do after university?',
        context: 'Asking about long-term future plans.',
        grammar: 'Harás = you will do (irregular future of hacer)',
        breakdown: { '¿Qué': 'What', 'harás': 'will you do', 'después de': 'after', 'la universidad?': 'the university?' }
      }
    ]
  },
  pastTenseArVerbs: {
    name: 'Pretérito: Verbos -AR',
    emoji: '📚',
    color: '#34D399',
    category: 'Gramática',
    description: 'Learn the past tense (preterite) for regular -AR verbs. This tense is used for completed actions in the past. We will conjugate the verb "hablar" (to speak).',
    flashcards: [
      {
        front: 'Yo hablé con el profesor ayer.',
        back: 'I spoke with the professor yesterday.',
        context: 'This is the "yo" (I) form. The accent on the final "é" is critical. It changes the pronunciation and distinguishes it from other words. Without the accent, "hable" would be a subjunctive form. This ending, "-é", is the rule for all regular -AR verbs in the "yo" form preterite.',
        grammar: "Preterite 'yo' form for -AR verbs. Stem 'habl-' + ending '-é'.",
        breakdown: {
          'Yo': 'I',
          'hablé': 'spoke',
          'con': 'with',
          'el': 'the',
          'profesor': 'professor',
          'ayer': 'yesterday'
        }
      },
      {
        front: 'Tú hablaste con María por teléfono.',
        back: 'You spoke with María on the phone.',
        context: 'This is the "tú" (you, informal) form. The ending "-aste" is consistent for all regular -AR verbs. Unlike the "yo" and "él/ella" forms, this one does not have a written accent mark.',
        grammar: "Preterite 'tú' form for -AR verbs. Stem 'habl-' + ending '-aste'.",
        breakdown: {
          'Tú': 'You (informal)',
          'hablaste': 'spoke',
          'con': 'with',
          'María': 'María',
          'por': 'by / on',
          'teléfono': 'telephone'
        }
      },
      {
        front: 'Usted habló de un tema muy interesante.',
        back: 'You (formal) spoke about a very interesting topic.',
        context: 'This is the "él/ella/usted" (he/she/you formal) form. The verb ending "-ó" is the same for all three pronouns. Again, the accent is crucial. "Habló" (he spoke) is very different from "hablo" (I speak).',
        grammar: "Preterite 'él/ella/usted' form for -AR verbs. Stem 'habl-' + ending '-ó'.",
        breakdown: {
          'Usted': 'You (formal)',
          'habló': 'spoke',
          'de': 'of / about',
          'un': 'a',
          'tema': 'topic',
          'muy': 'very',
          'interesante': 'interesting'
        }
      },
      {
        front: 'Nosotros hablamos sobre la película anoche.',
        back: 'We spoke about the movie last night.',
        context: 'This is the most confusing form for learners. The "nosotros" (we) form of -AR verbs in the preterite is IDENTICAL to the present tense form. Only the context words (like "anoche", "ayer", "la semana pasada") tell you it\'s in the past.',
        grammar: "Preterite 'nosotros' form for -AR verbs. Stem 'habl-' + ending '-amos'. Note: Identical to the present tense form.",
        breakdown: {
          'Nosotros': 'We',
          'hablamos': 'spoke',
          'sobre': 'about',
          'la': 'the',
          'película': 'movie',
          'anoche': 'last night'
        }
      },
      {
        front: 'Vosotros hablasteis con el guía turístico.',
        back: 'You (all) spoke with the tour guide. (Spain, informal)',
        context: 'This is the "vosotros" (you all, informal) form, used primarily in Spain. The "-asteis" ending is the standard for this form with regular -AR verbs. In Latin America, you would use the "ustedes" form instead.',
        grammar: "Preterite 'vosotros' form for -AR verbs. Stem 'habl-' + ending '-asteis'.",
        breakdown: {
          'Vosotros': 'You (plural, informal)',
          'hablasteis': 'spoke',
          'con': 'with',
          'el': 'the',
          'guía': 'guide',
          'turístico': 'tourist'
        }
      },
      {
        front: 'Ellos hablaron durante toda la reunión.',
        back: 'They spoke during the whole meeting.',
        context: 'This is the "ellos/ellas/ustedes" (they/you all) form. The "-aron" ending is the standard for this conjugation. This form is used for "they" (masculine or mixed), "they" (feminine), and "you all" (in Latin America and formal in Spain).',
        grammar: "Preterite 'ellos/ellas/ustedes' form for -AR verbs. Stem 'habl-' + ending '-aron'.",
        breakdown: {
          'Ellos': 'They',
          'hablaron': 'spoke',
          'durante': 'during',
          'toda': 'all / the whole',
          'la': 'the',
          'reunión': 'meeting'
        }
      }
    ]
  },
  pastTenseErVerbs: {
    name: 'Pretérito: Verbos -ER',
    emoji: '🍽️',
    color: '#F9A825',
    category: 'Gramática',
    description: 'Learn the past tense (preterite) for regular -ER verbs. We will conjugate the verb "comer" (to eat) to show the pattern for completed past actions.',
    flashcards: [
      {
        front: 'Yo comí una ensalada para el almuerzo.',
        back: 'I ate a salad for lunch.',
        context: 'This is the "yo" (I) form for -ER verbs. The ending is "-í", with a required accent. This ending applies to all regular -ER verbs in this form.',
        grammar: "Preterite 'yo' form for -ER verbs. Stem 'com-' + ending '-í'.",
        breakdown: {
          'Yo': 'I',
          'comí': 'ate',
          'una': 'a',
          'ensalada': 'salad',
          'para': 'for',
          'el': 'the',
          'almuerzo': 'lunch'
        }
      },
      {
        front: '¿Tú comiste todo el pastel?',
        back: 'Did you eat the whole cake?',
        context: 'This is the "tú" (you, informal) form. The ending is "-iste". This is one of the most consistent and recognizable preterite endings.',
        grammar: "Preterite 'tú' form for -ER verbs. Stem 'com-' + ending '-iste'.",
        breakdown: {
          '¿Tú': 'You (informal)',
          'comiste': 'ate',
          'todo': 'all',
          'el': 'the',
          'pastel?': 'cake?'
        }
      },
      {
        front: 'Él comió en ese restaurante la semana pasada.',
        back: 'He ate at that restaurant last week.',
        context: 'This is the "él/ella/usted" form. The ending "-ió" with the accent is the standard. This helps distinguish it from the present tense.',
        grammar: "Preterite 'él/ella/usted' form for -ER verbs. Stem 'com-' + ending '-ió'.",
        breakdown: {
          'Él': 'He',
          'comió': 'ate',
          'en': 'in / at',
          'ese': 'that',
          'restaurante': 'restaurant',
          'la': 'the',
          'semana': 'week',
          'pasada': 'last'
        }
      },
      {
        front: 'Nosotros comimos paella en Valencia.',
        back: 'We ate paella in Valencia.',
        context: 'This is a key difference from -AR verbs. For regular -ER verbs, the "nosotros" preterite form ("comimos") is DIFFERENT from the present tense form ("comemos"). This makes it less ambiguous.',
        grammar: "Preterite 'nosotros' form for -ER verbs. Stem 'com-' + ending '-imos'. Note: This is different from the present tense 'comemos'.",
        breakdown: {
          'Nosotros': 'We',
          'comimos': 'ate',
          'paella': 'paella',
          'en': 'in',
          'Valencia': 'Valencia'
        }
      },
      {
        front: 'Vosotros comisteis mucho en la fiesta.',
        back: 'You (all) ate a lot at the party. (Spain, informal)',
        context: 'This is the "vosotros" (you all, informal) form, used in Spain. The ending is "-isteis".',
        grammar: "Preterite 'vosotros' form for -ER verbs. Stem 'com-' + ending '-isteis'.",
        breakdown: {
          'Vosotros': 'You (plural, informal)',
          'comisteis': 'ate',
          'mucho': 'a lot',
          'en': 'at',
          'la': 'the',
          'fiesta': 'party'
        }
      },
      {
        front: 'Ustedes comieron antes de venir.',
        back: 'You (all) ate before coming.',
        context: 'This is the "ellos/ellas/ustedes" form. The ending is "-ieron". This form is used for "they" and for the plural "you" in Latin America (and formal "you" in Spain).',
        grammar: "Preterite 'ellos/ellas/ustedes' form for -ER verbs. Stem 'com-' + ending '-ieron'.",
        breakdown: {
          'Ustedes': 'You (plural)',
          'comieron': 'ate',
          'antes': 'before',
          'de': 'of',
          'venir': 'coming / to come'
        }
      }
    ]
  },
  pastTenseIrVerbs: {
    name: 'Pretérito: Verbos -IR',
    emoji: '🏠',
    color: '#60A5FA',
    category: 'Gramática',
    description: 'Learn the past tense (preterite) for regular -IR verbs. We will conjugate "vivir" (to live). Note how similar the endings are to -ER verbs.',
    flashcards: [
      {
        front: 'Yo viví en Argentina por dos años.',
        back: 'I lived in Argentina for two years.',
        context: 'The "yo" form preterite for -IR verbs is "-í", exactly the same as for -ER verbs. This makes learning them together easier.',
        grammar: "Preterite 'yo' form for -IR verbs. Stem 'viv-' + ending '-í'.",
        breakdown: {
          'Yo': 'I',
          'viví': 'lived',
          'en': 'in',
          'Argentina': 'Argentina',
          'por': 'for',
          'dos': 'two',
          'años': 'years'
        }
      },
      {
        front: 'Tú viviste una experiencia increíble.',
        back: 'You lived an incredible experience.',
        context: 'The "tú" form ending is "-iste", which is also identical to the ending for regular -ER verbs in the preterite.',
        grammar: "Preterite 'tú' form for -IR verbs. Stem 'viv-' + ending '-iste'.",
        breakdown: {
          'Tú': 'You (informal)',
          'viviste': 'lived',
          'una': 'an',
          'experiencia': 'experience',
          'increíble': 'incredible'
        }
      },
      {
        front: 'Ella vivió cerca de la playa.',
        back: 'She lived near the beach.',
        context: 'The "él/ella/usted" form ending is "-ió", once again the same as the corresponding -ER verb ending.',
        grammar: "Preterite 'él/ella/usted' form for -IR verbs. Stem 'viv-' + ending '-ió'.",
        breakdown: {
          'Ella': 'She',
          'vivió': 'lived',
          'cerca': 'near',
          'de': 'of',
          'la': 'the',
          'playa': 'beach'
        }
      },
      {
        front: 'Nosotros vivimos allí el año pasado.',
        back: 'We lived there last year.',
        context: 'This is the first major difference from -ER verbs and a critical point. For -IR verbs, the "nosotros" preterite form ("vivimos") is IDENTICAL to the present tense form ("vivimos"), just like with -AR verbs. You need context to know the tense.',
        grammar: "Preterite 'nosotros' form for -IR verbs. Stem 'viv-' + ending '-imos'. Note: Identical to the present tense form.",
        breakdown: {
          'Nosotros': 'We',
          'vivimos': 'lived',
          'allí': 'there',
          'el': 'the',
          'año': 'year',
          'pasado': 'last'
        }
      },
      {
        front: 'Vosotros vivisteis en Madrid, ¿verdad?',
        back: 'You (all) lived in Madrid, right? (Spain, informal)',
        context: 'This is the second difference from -ER verbs. The "vosotros" ending for -IR verbs is "-isteis", just like for -ER verbs. So only the "nosotros" and "vosotros" forms of -er and -ir differ in the present tense, but only the "nosotros" forms differ in the preterite (by being identical to present). This card shows the "-isteis" ending, same as -ER verbs.',
        grammar: "Preterite 'vosotros' form for -IR verbs. Stem 'viv-' + ending '-isteis'.",
        breakdown: {
          'Vosotros': 'You (plural, informal)',
          'vivisteis': 'lived',
          'en': 'in',
          'Madrid': 'Madrid',
          '¿verdad?': 'right? / true?'
        }
      },
      {
        front: 'Ellos escribieron un libro juntos.',
        back: 'They wrote a book together.',
        context: 'Using another -IR verb, "escribir", to show the pattern holds. The "ellos/ellas/ustedes" form ends in "-ieron", which is the same as the ending for -ER verbs.',
        grammar: "Preterite 'ellos/ellas/ustedes' form for -IR verbs. Stem 'escrib-' + ending '-ieron'.",
        breakdown: {
          'Ellos': 'They',
          'escribieron': 'wrote',
          'un': 'a',
          'libro': 'book',
          'juntos': 'together'
        }
      }
    ]
  }
};

// XP Levels Configuration
const XP_LEVELS = {
  1: { xp: 0, title: 'Principiante' },
  2: { xp: 50, title: 'Estudiante' },
  3: { xp: 150, title: 'Aprendiz' },
  4: { xp: 300, title: 'Intermedio' },
  5: { xp: 500, title: 'Avanzado' },
  6: { xp: 750, title: 'Experto' },
  7: { xp: 1050, title: 'Maestro' },
  8: { xp: 1400, title: 'Profesor' },
  9: { xp: 1800, title: 'Gurú' },
  10: { xp: 2250, title: 'Leyenda' }
};

// Default Settings
const DEFAULT_SETTINGS = {
  // TTS Settings
  ttsAutoPlay: true,
  ttsAutoPlayEnglish: false,
  ttsVolume: 0.8,
  ttsRate: 1.0,
  ttsPitch: 1.0,
  ttsCooldown: 3000, // 3 seconds cooldown to prevent repeated messages
  
  // Animation Settings
  animationsEnabled: true,
  flashcardFlipSpeed: 0.8,
  transitionSpeed: 0.3,
  
  // Game Settings
  showProgressBars: true,
  showXP: true,
  showLevelInfo: true,
  
  // UI Settings
  darkMode: 'auto', // 'light', 'dark', 'auto'
  compactMode: false,
  showHints: true,
  
  // Learning Settings
  autoMarkLearned: false,
  showCorrectAnswers: true,
  flexibleAnswerValidation: true,
  
  // Accessibility
  highContrast: false,
  largeText: false,
  reduceMotion: false
};

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { REGIONS, XP_LEVELS };
}
</file>

<file path="js/ui.js">
// UI Components and Rendering

class LanguageGameUI {
  constructor() {
    this.elements = {
      xpCounter: document.getElementById('xpCounter'),
      mapContainer: document.getElementById('mapContainer'),
      panelTitle: document.getElementById('panelTitle'),
      panelBody: document.getElementById('panelBody'),
      progressContainer: document.getElementById('progressContainer'),
      flashcardBtn: document.getElementById('flashcardBtn'),
      quizBtn: document.getElementById('quizBtn'),
      crBtn: document.getElementById('crBtn'),
      levelLabel: document.getElementById('levelLabel'),
      xpBar: document.getElementById('xpBar')
    };

    this.currentCardIndex = 0;
    this.currentCards = [];
    this.currentCard = null; // Store current card for word lookups
    this.popup = null; // Store popup element
    this.currentTab = 'map'; // Track current active tab

    this.initializeEventListeners();
  }

  /**
   * Initialize event listeners
   */
  initializeEventListeners() {
    // Mode button listeners
    this.elements.flashcardBtn.addEventListener('click', () => this.switchMode('flashcard'));
    this.elements.quizBtn.addEventListener('click', () => this.switchMode('quiz'));
    this.elements.crBtn.addEventListener('click', () => this.switchMode('call-response'));

    // Tab navigation listeners
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabName = btn.getAttribute('data-tab');
        this.switchTab(tabName);
      });
    });

    // Close popup when clicking outside
    document.addEventListener('click', (e) => {
      if (this.popup && !this.popup.contains(e.target) && !e.target.classList.contains('clickable-word')) {
        this.hidePopup();
      }
    });
  }

  /**
   * Switch between tabs
   * @param {string} tabName - Name of the tab to switch to
   */
  switchTab(tabName) {
    // Update tab button states
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-tab') === tabName) {
        btn.classList.add('active');
      }
    });

    // Update tab panel visibility
    const tabPanels = document.querySelectorAll('.tab-panel');
    tabPanels.forEach(panel => {
      panel.classList.remove('active');
      if (panel.id === `${tabName}-tab`) {
        panel.classList.add('active');
      }
    });

    this.currentTab = tabName;

    // Update content based on tab
    switch (tabName) {
      case 'map':
        this.renderMap();
        break;
      case 'game':
        this.renderCurrentMode();
        break;
      case 'progress':
        this.renderProgress();
        break;
    }

    // Save current tab to localStorage
    localStorage.setItem('currentTab', tabName);
  }

  /**
   * Get the current active tab
   * @returns {string} Current tab name
   */
  getCurrentTab() {
    return this.currentTab;
  }

  /**
   * Create clickable word spans from text
   * @param {string} text - Text to make clickable
   * @param {Object} breakdown - Word breakdown object
   * @returns {string} - HTML with clickable words
   */
  makeWordsClickable(text, breakdown = {}) {
    if (!breakdown || Object.keys(breakdown).length === 0) {
      return text; // Return original text if no breakdown available
    }

    let processedText = text;

    // First, identify and process multi-word phrases
    // Sort breakdown keys by length (longest first) to handle overlapping phrases correctly
    const sortedKeys = Object.keys(breakdown).sort((a, b) => b.length - a.length);

    sortedKeys.forEach(phrase => {
      // Only process phrases that contain spaces (multi-word phrases)
      if (phrase.includes(' ')) {
        const explanation = breakdown[phrase];
        // Create a regex that matches the phrase, handling punctuation at start/end
        // Escape special regex characters
        const escapedPhrase = phrase.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

        // For phrases that start with punctuation, don't use word boundary at the start
        // For phrases that end with punctuation, don't use word boundary at the end
        const startsWithPunctuation = /^[¿¡.,!?;:]/.test(phrase);
        const endsWithPunctuation = /[.,!?;:]$/.test(phrase);

        let regexPattern;
        if (startsWithPunctuation && endsWithPunctuation) {
          regexPattern = escapedPhrase; // No word boundaries
        } else if (startsWithPunctuation) {
          regexPattern = `${escapedPhrase}\\b`; // Only end boundary
        } else if (endsWithPunctuation) {
          regexPattern = `\\b${escapedPhrase}`; // Only start boundary
        } else {
          regexPattern = `\\b${escapedPhrase}\\b`; // Both boundaries
        }

        const regex = new RegExp(regexPattern, 'gi');

        processedText = processedText.replace(regex, (match) => {
          return `<span class="clickable-word multi-word-phrase" data-word="${phrase}" data-explanation="${explanation}">${match}</span>`;
        });
      }
    });

    // Then process individual words that haven't been wrapped yet
    // Use a more careful approach that preserves spacing
    const tokens = processedText.split(/(\s+)/); // Split only on whitespace, preserve spaces

    const result = tokens.map(token => {
      // If it's just whitespace, return as-is
      if (/^\s+$/.test(token)) {
        return token;
      }

      // If it already contains a span (already processed), return as-is
      if (token.includes('<span')) {
        return token;
      }

      // Split the token by punctuation while preserving the punctuation
      const parts = token.split(/([.,!?;:])/);

      return parts.map(part => {
        if (!part || /^[.,!?;:]$/.test(part)) {
          return part; // Return punctuation as-is
        }

        const cleanPart = part.trim();
        if (!cleanPart) {
          return part;
        }

        // Check if this individual word exists in breakdown (and isn't a multi-word phrase)
        const explanation = breakdown[cleanPart] || breakdown[part];
        if (explanation && !cleanPart.includes(' ')) {
          return `<span class="clickable-word" data-word="${cleanPart}" data-explanation="${explanation}">${part}</span>`;
        }

        return part; // Return part as-is if no explanation
      }).join('');
    }).join('');

    return result;
  }

  /**
   * Show word popup
   * @param {string} word - The word clicked
   * @param {string} explanation - The explanation for the word
   * @param {Event} event - Click event
   */
  showPopup(word, explanation, event) {
    // Hide existing popup
    this.hidePopup();

    // Create popup element
    this.popup = document.createElement('div');
    this.popup.className = 'word-popup';
    this.popup.innerHTML = `
      <div class="popup-content">
        <div class="popup-header">
          <span class="popup-word">${word}</span>
          <button class="popup-close" onclick="ui.hidePopup()">×</button>
        </div>
        <div class="popup-body">
          <div class="popup-explanation">${explanation}</div>
        </div>
      </div>
    `;

    // Position popup near the clicked word
    const rect = event.target.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

    // Calculate initial position
    let top = rect.bottom + scrollTop + 5;
    let left = rect.left + scrollLeft;

    // Add to body first to get popup dimensions
    document.body.appendChild(this.popup);

    // Adjust position to keep popup on screen
    const popupRect = this.popup.getBoundingClientRect();
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // Adjust horizontal position
    if (left + popupRect.width > viewportWidth + scrollLeft) {
      left = viewportWidth + scrollLeft - popupRect.width - 10;
    }
    if (left < scrollLeft) {
      left = scrollLeft + 10;
    }

    // Adjust vertical position
    if (top + popupRect.height > viewportHeight + scrollTop) {
      // Show above the word if there's not enough space below
      top = rect.top + scrollTop - popupRect.height - 5;
    }
    if (top < scrollTop) {
      top = scrollTop + 10;
    }

    this.popup.style.position = 'absolute';
    this.popup.style.top = `${top}px`;
    this.popup.style.left = `${left}px`;

    // Add click event to close popup
    this.popup.addEventListener('click', (e) => {
      if (e.target.classList.contains('popup-close')) {
        this.hidePopup();
      }
    });
  }

  /**
   * Hide word popup
   */
  hidePopup() {
    if (this.popup) {
      this.popup.remove();
      this.popup = null;
    }
  }

  /**
   * Add click handlers to clickable words
   */
  addWordClickHandlers() {
    const clickableWords = document.querySelectorAll('.clickable-word');
    clickableWords.forEach(word => {
      word.addEventListener('click', (e) => {
        e.stopPropagation();
        const wordText = word.dataset.word;
        const explanation = word.dataset.explanation;

        // Determine language by checking if the word is on the front or back of the card
        const isFront = e.target.closest('.flashcard-front');
        const lang = isFront ? 'es' : 'en';

        // Speak the clicked word
        speakSpanish(wordText, lang);

        // Show the definition popup
        this.showPopup(wordText, explanation, e);
      });
    });
  }

  /**
   * Add click handlers to quiz options
   */
  addQuizOptionHandlers() {
    const quizOptions = document.querySelectorAll('.quiz-option');
    quizOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const userAnswer = option.dataset.answer;
        const correctAnswer = option.dataset.correct;
        this.checkQuizAnswer(userAnswer, correctAnswer);
      });
    });
  }

  /**
   * Update XP display with level information
   */
  updateXPDisplay() {
    const lvl = game.getLevelInfo();
    this.elements.xpCounter.textContent = `${formatXP(game.xp)} XP`;
    document.getElementById('levelLabel').textContent = `Lvl ${lvl.level}`;
    const bar = document.getElementById('xpBar');
    bar.max = lvl.xpNeeded;
    bar.value = lvl.xpProgress;
  }

  /**
   * Render the map with all regions grouped by category
   */
  renderMap() {
    this.elements.mapContainer.innerHTML = '';

    const regionsWithProgress = game.getAllRegionsWithProgress();
    
    // Group regions by category
    const groupedRegions = {};
    Object.entries(regionsWithProgress).forEach(([regionKey, regionData]) => {
      const category = regionData.category || 'Otros';
      if (!groupedRegions[category]) {
        groupedRegions[category] = [];
      }
      groupedRegions[category].push({ key: regionKey, data: regionData });
    });

    // Define category order and emojis
    const categoryOrder = ['Fundamentos', 'Situaciones', 'Conversación', 'Gramática'];
    const categoryEmojis = {
      'Fundamentos': '🌟',
      'Situaciones': '🎯',
      'Conversación': '💬',
      'Gramática': '📚'
    };

    // Render each category
    categoryOrder.forEach(category => {
      if (!groupedRegions[category]) return;

      // Create category section
      const categorySection = document.createElement('div');
      categorySection.className = 'category-section';
      
      const categoryHeader = document.createElement('div');
      categoryHeader.className = 'category-header';
      categoryHeader.innerHTML = `
        <h3>${categoryEmojis[category]} ${category}</h3>
      `;
      
      const categoryGrid = document.createElement('div');
      categoryGrid.className = 'category-grid';

      // Add regions to this category
      groupedRegions[category].forEach(({ key: regionKey, data: regionData }) => {
        const regionCard = document.createElement('div');
        regionCard.className = 'region-card';
        regionCard.style.backgroundColor = regionData.color;
        regionCard.setAttribute('data-region', regionKey);

        const progress = regionData.progress;
        const percentage = Math.round(progress.percentage);

        regionCard.innerHTML = `
          <div class="region-content">
            <div class="region-emoji">${regionData.emoji}</div>
            <div class="region-info">
              <h4>${regionData.name}</h4>
              <div class="progress-info">
                ${progress.learned}/${progress.total} (${percentage}%)
              </div>
            </div>
          </div>
          <div class="region-progress-bar">
            <div class="region-progress-fill" style="width: ${percentage}%"></div>
          </div>
        `;

        regionCard.addEventListener('click', () => this.selectRegion(regionKey));
        categoryGrid.appendChild(regionCard);
      });

      categorySection.appendChild(categoryHeader);
      categorySection.appendChild(categoryGrid);
      this.elements.mapContainer.appendChild(categorySection);
    });
  }

  /**
   * Select a region and update UI
   * @param {string} regionKey - Region key
   */
  selectRegion(regionKey) {
    game.setCurrentRegion(regionKey);

    // Update map selection
    const regionCards = this.elements.mapContainer.querySelectorAll('.region-card');
    regionCards.forEach(card => card.classList.remove('selected'));

    const selectedCard = this.elements.mapContainer.querySelector(`[data-region="${regionKey}"]`);
    if (selectedCard) {
      selectedCard.classList.add('selected');
    }

    // Update panel title
    const region = REGIONS[regionKey];
    this.elements.panelTitle.textContent = region.name;

    // Switch to game tab and render current mode
    this.switchTab('game');
    this.renderCurrentMode();
  }

  /**
   * Switch game mode
   * @param {string} mode - New mode
   */
  switchMode(mode) {
    game.setCurrentMode(mode);

    // Update button states
    const modeButtons = [this.elements.flashcardBtn, this.elements.quizBtn, this.elements.crBtn];
    modeButtons.forEach(btn => btn.classList.remove('active'));

    const activeButton = this.elements[`${mode.replace('-', '')}Btn`];
    if (activeButton) {
      activeButton.classList.add('active');
    }

    // Render the new mode
    this.renderCurrentMode();
  }

  /**
   * Render the current game mode
   */
  renderCurrentMode() {
    if (!game.currentRegionKey) {
      this.renderPlaceholder();
      return;
    }

    switch (game.currentMode) {
      case 'flashcard':
        this.renderFlashcards();
        break;
      case 'quiz':
        this.renderQuiz();
        break;
      case 'call-response':
        this.renderCallResponse();
        break;
    }
  }

  /**
   * Render placeholder when no region is selected
   */
  renderPlaceholder() {
    this.elements.panelBody.innerHTML = `
      <p class="placeholder-text">Elige una región del mapa para comenzar a aprender español.</p>
    `;
  }

  /**
   * Show first-time flashcard tip
   */
  showFirstTimeFlashcardTip() {
    // Check if user has seen the tip before
    const hasSeenTip = localStorage.getItem('flashcardTipSeen');
    if (hasSeenTip) {
      return;
    }

    // Create and show the tip overlay
    const tipOverlay = document.createElement('div');
    tipOverlay.className = 'modal-overlay';
    tipOverlay.innerHTML = `
      <div class="modal-content flashcard-tip-modal">
        <div class="modal-header">
          <h2>💡 Helpful Tip</h2>
          <button class="modal-close" onclick="ui.hideFlashcardTip()">×</button>
        </div>
        <div class="modal-body">
          <p>Welcome to flashcards! 🎉</p>
          <p><strong>Tip:</strong> You can click on any word in the flashcards to see its meaning and explanation.</p>
          <p>This will help you better understand each phrase and learn new vocabulary.</p>
        </div>
        <div class="modal-footer">
          <button class="btn primary" onclick="ui.hideFlashcardTip()">Got it!</button>
        </div>
      </div>
    `;

    document.body.appendChild(tipOverlay);
    this.flashcardTipOverlay = tipOverlay;

    // Mark as seen
    localStorage.setItem('flashcardTipSeen', 'true');
  }

  /**
   * Hide first-time flashcard tip
   */
  hideFlashcardTip() {
    if (this.flashcardTipOverlay) {
      this.flashcardTipOverlay.remove();
      this.flashcardTipOverlay = null;
    }
  }

  /**
   * Render flashcards mode
   */
  renderFlashcards() {
    const flashcards = game.getCurrentFlashcards();
    if (flashcards.length === 0) {
      this.elements.panelBody.innerHTML = '<p class="text-center">No hay flashcards disponibles.</p>';
      return;
    }

    // Show first-time tip if user hasn't seen it before
    this.showFirstTimeFlashcardTip();

    this.currentCards = flashcards;
    this.currentCardIndex = 0;
    this.renderCurrentFlashcard();
  }

  /**
   * Render current flashcard
   */
  renderCurrentFlashcard() {
    if (this.currentCardIndex >= this.currentCards.length) {
      this.elements.panelBody.innerHTML = `
        <div class="text-center">
          <h3>¡Completado!</h3>
          <p>Has revisado todas las flashcards de esta región.</p>
          <button class="flashcard-btn primary" onclick="ui.renderFlashcards()">
            Empezar de nuevo
          </button>
        </div>
      `;
      return;
    }

    const card = this.currentCards[this.currentCardIndex];
    this.currentCard = card; // Store current card for word lookups

    // Check if card has enhanced information
    const hasEnhancedInfo = card.context || card.grammar || card.breakdown;

    this.elements.panelBody.innerHTML = `
      <div class="flashcard" onclick="ui.flipFlashcard()">
        <div class="flashcard-inner">
          <div class="flashcard-front">
            <button class="tts-btn" onclick="event.stopPropagation(); ui.speakCard('${card.front}')">🔊</button>
            <div class="flip-indicator">🔄</div>
            ${this.makeWordsClickable(card.front, card.breakdown)}
          </div>
          <div class="flashcard-back">
            <button class="tts-btn" onclick="event.stopPropagation(); ui.speakCard('${card.back}', 'en')">🔊</button>
            <div class="flip-indicator">🔄</div>
            ${this.makeWordsClickable(card.back, card.breakdown)}
          </div>
        </div>
      </div>
      <div class="flashcard-controls">
        <button class="flashcard-btn secondary" onclick="ui.previousFlashcard()">
          ← Anterior
        </button>
        ${hasEnhancedInfo ? `
          <button class="flashcard-btn secondary" onclick="ui.toggleFlashcardDetails()">
            📖 Detalles
          </button>
        ` : ''}
        <button class="flashcard-btn primary" onclick="ui.markAsLearned()">
          ✓ Aprendido
        </button>
        <button class="flashcard-btn secondary" onclick="ui.nextFlashcard()">
          Siguiente →
        </button>
      </div>
      ${hasEnhancedInfo ? `
        <div class="flashcard-details-card" id="detailsCard" style="display: none;">
          <div class="details-content">
            ${card.context ? `<div class="context-note"><strong>📝 Cuándo usar:</strong> ${card.context}</div>` : ''}
            ${card.grammar ? `<div class="grammar-note"><strong>📚 Gramática:</strong> ${card.grammar}</div>` : ''}
            ${card.breakdown ? `
              <div class="word-breakdown">
                <strong>🔍 Desglose:</strong>
                <div class="breakdown-items">
                  ${Object.entries(card.breakdown).map(([word, explanation]) =>
      `<div class="breakdown-item"><span class="word">${word}</span>: ${explanation}</div>`
    ).join('')}
                </div>
              </div>
            ` : ''}
          </div>
        </div>
      ` : ''}
    `;

    // Add click handlers to clickable words
    this.addWordClickHandlers();

    // Auto-play TTS for the Spanish phrase (if enabled)
    if (game.getSetting('ttsAutoPlay')) {
      setTimeout(() => {
        this.speakCard(card.front);
      }, 500);
    }
  }

  /**
   * Speak the card text
   * @param {string} text - Text to speak
   * @param {string} lang - Language code (default: 'es')
   */
  speakCard(text, lang = 'es') {
    speakSpanish(text, lang);
  }

  /**
   * Flip the current flashcard
   */
  flipFlashcard() {
    const flashcard = this.elements.panelBody.querySelector('.flashcard');
    if (flashcard) {
      flashcard.classList.toggle('flipped');

      // Auto-play TTS based on settings
      setTimeout(() => {
        const card = this.currentCards[this.currentCardIndex];
        if (flashcard.classList.contains('flipped')) {
          // Speak the English translation when flipped (if enabled)
          if (game.getSetting('ttsAutoPlayEnglish')) {
            this.speakCard(card.back, 'en');
          }
        } else {
          // Speak the Spanish phrase when flipped back (if enabled)
          if (game.getSetting('ttsAutoPlay')) {
            this.speakCard(card.front, 'es');
          }
        }
      }, game.getSetting('flashcardFlipSpeed') * 1000);
    }
  }

  /**
   * Toggle flashcard details visibility
   */
  toggleFlashcardDetails() {
    const detailsCard = document.getElementById('detailsCard');
    if (detailsCard) {
      const isVisible = detailsCard.style.display !== 'none';
      detailsCard.style.display = isVisible ? 'none' : 'block';

      // Update button text
      const detailsBtn = this.elements.panelBody.querySelector('.flashcard-btn[onclick*="toggleFlashcardDetails"]');
      if (detailsBtn) {
        detailsBtn.innerHTML = isVisible ? '📖 Detalles' : '📖 Ocultar';
      }
    }
  }

  /**
   * Go to previous flashcard
   */
  previousFlashcard() {
    if (this.currentCardIndex > 0) {
      this.currentCardIndex--;
      this.renderCurrentFlashcard();
    }
  }

  /**
   * Go to next flashcard
   */
  nextFlashcard() {
    if (this.currentCardIndex < this.currentCards.length - 1) {
      this.currentCardIndex++;
      this.renderCurrentFlashcard();
    }
  }

  /**
   * Mark current flashcard as learned
   */
  markAsLearned() {
    const card = this.currentCards[this.currentCardIndex];
    const wasNewlyLearned = game.addLearned(card.front, card.back, game.currentRegionKey, 10);

    if (wasNewlyLearned) {
      this.updateXPDisplay();
      this.renderProgress();
      this.renderMap(); // Update map progress
    }

    this.nextFlashcard();
  }

  /**
   * Render quiz mode
   */
  renderQuiz() {
    const card = game.getNextQuizCard();
    if (!card) {
      this.elements.panelBody.innerHTML = `
        <div class="text-center">
          <h3>¡Quiz completado!</h3>
          <p>Has completado todas las preguntas de esta región.</p>
          <button class="flashcard-btn primary" onclick="game.resetQuiz(); ui.renderQuiz()">
            Empezar de nuevo
          </button>
        </div>
      `;
      return;
    }

    this.currentCard = card; // Store current card for word lookups
    const options = game.getQuizOptions(card);

    this.elements.panelBody.innerHTML = `
      <div class="quiz-question">
        <h4>¿Cómo se dice "${card.back}" en español?</h4>
      </div>
      <div class="quiz-options">
        ${options.map(option => `
          <div class="quiz-option" data-answer="${option.front}" data-correct="${card.front}">
            ${option.front}
          </div>
        `).join('')}
      </div>
    `;

    // Add click handlers for quiz options (not for words)
    this.addQuizOptionHandlers();
  }

  /**
   * Check quiz answer
   * @param {string} userAnswer - User's answer
   * @param {string} correctAnswer - Correct answer
   */
  checkQuizAnswer(userAnswer, correctAnswer) {
    const isCorrect = userAnswer === correctAnswer;
    const card = { front: correctAnswer, back: '' };

    // Add feedback
    const feedback = document.createElement('div');
    feedback.className = `quiz-feedback ${isCorrect ? 'correct' : 'incorrect'}`;
    feedback.textContent = isCorrect ? '¡Correcto!' : `Incorrecto. La respuesta correcta es: ${correctAnswer}`;

    const quizOptions = this.elements.panelBody.querySelector('.quiz-options');
    quizOptions.appendChild(feedback);

    // Mark as learned if correct
    if (isCorrect) {
      game.addLearned(card.front, card.back, game.currentRegionKey, 15);
      this.updateXPDisplay();
      this.renderProgress();
      this.renderMap(); // Update map progress
    }

    // Disable all options
    const options = this.elements.panelBody.querySelectorAll('.quiz-option');
    options.forEach(option => {
      option.style.pointerEvents = 'none';
      if (option.textContent.trim() === userAnswer) {
        option.classList.add(isCorrect ? 'correct' : 'incorrect');
      }
    });

    // Continue after delay
    setTimeout(() => {
      this.renderQuiz();
    }, 2000);
  }

  /**
   * Render call & response mode
   */
  renderCallResponse() {
    const card = game.getNextCRCard();
    if (!card) {
      this.elements.panelBody.innerHTML = `
        <div class="text-center">
          <h3>¡Call & Response completado!</h3>
          <p>Has completado todas las preguntas de esta región.</p>
          <button class="flashcard-btn primary" onclick="game.resetCR(); ui.renderCallResponse()">
            Empezar de nuevo
          </button>
        </div>
      `;
      return;
    }

    this.currentCard = card; // Store current card for word lookups

    this.elements.panelBody.innerHTML = `
      <div class="cr-prompt">
        <button class="tts-btn" onclick="speakSpanish('${card.back}')">🔊</button>
        ${this.makeWordsClickable(card.back, card.breakdown)}
      </div>
      <input type="text" class="cr-input" placeholder="Escribe la respuesta en español" 
             onkeypress="if(event.key === 'Enter') ui.checkCRAnswer(this.value, '${card.front}')">
      <button class="cr-submit" onclick="ui.checkCRAnswer(this.previousElementSibling.value, '${card.front}')">
        Comprobar
      </button>
      <div id="crFeedback" style="margin-top: 0.6rem; text-align: center;"></div>
    `;

    // Add click handlers to clickable words
    this.addWordClickHandlers();
  }

  /**
   * Clear call & response answer to allow retry
   */
  clearCRAnswer() {
    const input = this.elements.panelBody.querySelector('.cr-input');
    const submitBtn = this.elements.panelBody.querySelector('.cr-submit');
    const feedback = document.getElementById('crFeedback');

    // Clear and re-enable input
    input.value = '';
    input.disabled = false;
    input.style.borderColor = '';
    input.focus();

    // Re-enable submit button
    submitBtn.disabled = false;

    // Clear feedback
    feedback.innerHTML = '';
  }

  /**
   * Check call & response answer with enhanced feedback
   * @param {string} userAnswer - User's answer
   * @param {string} correctAnswer - Correct answer
   */
  checkCRAnswer(userAnswer, correctAnswer) {
    const validation = game.checkCRAnswer(userAnswer, { front: correctAnswer });
    const feedback = document.getElementById('crFeedback');
    const input = this.elements.panelBody.querySelector('.cr-input');

    if (validation.isCorrect) {
      input.style.borderColor = 'var(--clr-success)';

      // Show correct answer if confidence is less than 99% (not perfect)
      const showCorrectAnswer = validation.confidence < 0.99;

      feedback.innerHTML = `
        <div class="cr-feedback correct">
          <strong>¡Correcto!</strong>
          ${showCorrectAnswer ? `
            <div class="correct-answer">
              Respuesta ideal: <strong>${correctAnswer}</strong>
            </div>
          ` : ''}
          <div class="feedback-details">
            ${validation.type === 'exact' ? 'Respuesta perfecta' :
          validation.type === 'partial' ? 'Respuesta parcial aceptada' :
            validation.type === 'fuzzy' ? `Respuesta aceptada (similitud: ${Math.round(validation.confidence * 100)}%)` :
              'Respuesta aceptada'}
          </div>
          ${showCorrectAnswer ? `
            <div class="feedback-details">
              Tu respuesta: "${userAnswer}"
            </div>
          ` : ''}
        </div>
      `;
      feedback.style.color = 'var(--clr-success)';

      const card = { front: correctAnswer, back: '' };
      game.addLearned(card.front, card.back, game.currentRegionKey, 15);
      this.updateXPDisplay();
      this.renderProgress();
      this.renderMap(); // Update map progress

      // Auto-advance to next question after correct answer
      setTimeout(() => {
        this.renderCallResponse();
      }, 2000);
    } else {
      input.style.borderColor = 'var(--clr-error)';
      feedback.innerHTML = `
        <div class="cr-feedback incorrect">
          <strong>Incorrecto</strong>
          <div class="correct-answer">
            Respuesta correcta: <strong>${correctAnswer}</strong>
          </div>
          <div class="feedback-details">
            Tu respuesta: "${userAnswer}"
            <br>
            Similitud: ${Math.round(validation.confidence * 100)}%
          </div>
          <div class="cr-controls">
            <button class="cr-try-again" onclick="ui.clearCRAnswer()">
              Intentar de nuevo
            </button>
            <button class="cr-continue" onclick="ui.renderCallResponse()">
              Continuar →
            </button>
          </div>
        </div>
      `;
      feedback.style.color = 'var(--clr-error)';

      // Disable the submit button and input after wrong answer
      const submitBtn = this.elements.panelBody.querySelector('.cr-submit');
      input.disabled = true;
      submitBtn.disabled = true;
    }
  }

  /**
   * Render progress bars
   */
  renderProgress() {
    this.elements.progressContainer.innerHTML = '';

    const regionsWithProgress = game.getAllRegionsWithProgress();

    Object.entries(regionsWithProgress).forEach(([regionKey, regionData]) => {
      const progress = regionData.progress;
      const percentage = Math.round(progress.percentage);

      const progressItem = document.createElement('div');
      progressItem.className = 'progress-item';
      progressItem.innerHTML = `
        <div class="progress-header">
          <span class="progress-title">${regionData.name}</span>
          <span class="progress-percentage">${progress.learned}/${progress.total}</span>
        </div>
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${percentage}%"></div>
        </div>
      `;

      this.elements.progressContainer.appendChild(progressItem);
    });
  }

  /**
   * Initialize the UI
   */
  initialize() {
    this.updateXPDisplay();
    this.renderMap();
    this.renderProgress();
    this.renderPlaceholder();

    // Restore last active tab
    const lastTab = localStorage.getItem('currentTab') || 'map';
    this.switchTab(lastTab);
  }

  /**
   * Show settings modal
   */
  showSettings() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
      <div class="modal-content settings-modal">
        <div class="modal-header">
          <h2>⚙️ Configuración</h2>
          <button class="modal-close" onclick="ui.closeSettings()">×</button>
        </div>
        <div class="modal-body">
          <div class="settings-section">
            <h3>🔊 Text-to-Speech</h3>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="ttsAutoPlay" ${game.getSetting('ttsAutoPlay') ? 'checked' : ''}>
                Auto-reproducir español
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="ttsAutoPlayEnglish" ${game.getSetting('ttsAutoPlayEnglish') ? 'checked' : ''}>
                Auto-reproducir inglés
              </label>
            </div>
            <div class="setting-item">
              <label>Volumen: <input type="range" id="ttsVolume" min="0" max="1" step="0.1" value="${game.getSetting('ttsVolume')}"></label>
              <span id="ttsVolumeValue">${Math.round(game.getSetting('ttsVolume') * 100)}%</span>
            </div>
            <div class="setting-item">
              <label>Velocidad: <input type="range" id="ttsRate" min="0.5" max="2" step="0.1" value="${game.getSetting('ttsRate')}"></label>
              <span id="ttsRateValue">${game.getSetting('ttsRate')}x</span>
            </div>
            <div class="setting-item">
              <label>Tiempo de espera: <input type="range" id="ttsCooldown" min="1000" max="10000" step="500" value="${game.getSetting('ttsCooldown')}"></label>
              <span id="ttsCooldownValue">${game.getSetting('ttsCooldown') / 1000}s</span>
            </div>
          </div>
          
          <div class="settings-section">
            <h3>🎬 Animaciones</h3>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="animationsEnabled" ${game.getSetting('animationsEnabled') ? 'checked' : ''}>
                Habilitar animaciones
              </label>
            </div>
            <div class="setting-item">
              <label>Velocidad de flip: <input type="range" id="flashcardFlipSpeed" min="0.3" max="2" step="0.1" value="${game.getSetting('flashcardFlipSpeed')}"></label>
              <span id="flashcardFlipSpeedValue">${game.getSetting('flashcardFlipSpeed')}s</span>
            </div>
          </div>
          
          <div class="settings-section">
            <h3>🎮 Juego</h3>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="showProgressBars" ${game.getSetting('showProgressBars') ? 'checked' : ''}>
                Mostrar barras de progreso
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="showXP" ${game.getSetting('showXP') ? 'checked' : ''}>
                Mostrar XP
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="showCorrectAnswers" ${game.getSetting('showCorrectAnswers') ? 'checked' : ''}>
                Mostrar respuestas correctas
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="flexibleAnswerValidation" ${game.getSetting('flexibleAnswerValidation') ? 'checked' : ''}>
                Validación flexible de respuestas
              </label>
            </div>
          </div>
          
          <div class="settings-section">
            <h3>🎨 Interfaz</h3>
            <div class="setting-item">
              <label>Modo oscuro:
                <select id="darkMode">
                  <option value="auto" ${game.getSetting('darkMode') === 'auto' ? 'selected' : ''}>Automático</option>
                  <option value="light" ${game.getSetting('darkMode') === 'light' ? 'selected' : ''}>Claro</option>
                  <option value="dark" ${game.getSetting('darkMode') === 'dark' ? 'selected' : ''}>Oscuro</option>
                </select>
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="compactMode" ${game.getSetting('compactMode') ? 'checked' : ''}>
                Modo compacto
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="largeText" ${game.getSetting('largeText') ? 'checked' : ''}>
                Texto grande
              </label>
            </div>
          </div>
          
          <div class="settings-section">
            <h3>♿ Accesibilidad</h3>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="highContrast" ${game.getSetting('highContrast') ? 'checked' : ''}>
                Alto contraste
              </label>
            </div>
            <div class="setting-item">
              <label>
                <input type="checkbox" id="reduceMotion" ${game.getSetting('reduceMotion') ? 'checked' : ''}>
                Reducir movimiento
              </label>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn secondary" onclick="ui.resetSettings()">Restablecer</button>
          <button class="btn primary" onclick="ui.saveSettings()">Guardar</button>
        </div>
      </div>
    `;

    // Add event listeners for range inputs
    this.setupSettingsListeners();
  }

  /**
   * Setup settings modal event listeners
   */
  setupSettingsListeners() {
    // Volume range
    const volumeInput = document.getElementById('ttsVolume');
    const volumeValue = document.getElementById('ttsVolumeValue');
    if (volumeInput) {
      volumeInput.addEventListener('input', (e) => {
        volumeValue.textContent = Math.round(e.target.value * 100) + '%';
      });
    }

    // Rate range
    const rateInput = document.getElementById('ttsRate');
    const rateValue = document.getElementById('ttsRateValue');
    if (rateInput) {
      rateInput.addEventListener('input', (e) => {
        rateValue.textContent = e.target.value + 'x';
      });
    }

    // Cooldown range
    const cooldownInput = document.getElementById('ttsCooldown');
    const cooldownValue = document.getElementById('ttsCooldownValue');
    if (cooldownInput) {
      cooldownInput.addEventListener('input', (e) => {
        cooldownValue.textContent = (e.target.value / 1000) + 's';
      });
    }

    // Flip speed range
    const flipSpeedInput = document.getElementById('flashcardFlipSpeed');
    const flipSpeedValue = document.getElementById('flashcardFlipSpeedValue');
    if (flipSpeedInput) {
      flipSpeedInput.addEventListener('input', (e) => {
        flipSpeedValue.textContent = e.target.value + 's';
      });
    }
  }

  /**
   * Save settings from modal
   */
  saveSettings() {
    const settings = {};

    // TTS Settings
    settings.ttsAutoPlay = document.getElementById('ttsAutoPlay').checked;
    settings.ttsAutoPlayEnglish = document.getElementById('ttsAutoPlayEnglish').checked;
    settings.ttsVolume = parseFloat(document.getElementById('ttsVolume').value);
    settings.ttsRate = parseFloat(document.getElementById('ttsRate').value);
    settings.ttsCooldown = parseInt(document.getElementById('ttsCooldown').value);

    // Animation Settings
    settings.animationsEnabled = document.getElementById('animationsEnabled').checked;
    settings.flashcardFlipSpeed = parseFloat(document.getElementById('flashcardFlipSpeed').value);

    // Game Settings
    settings.showProgressBars = document.getElementById('showProgressBars').checked;
    settings.showXP = document.getElementById('showXP').checked;
    settings.showCorrectAnswers = document.getElementById('showCorrectAnswers').checked;
    settings.flexibleAnswerValidation = document.getElementById('flexibleAnswerValidation').checked;

    // UI Settings
    settings.darkMode = document.getElementById('darkMode').value;
    settings.compactMode = document.getElementById('compactMode').checked;
    settings.largeText = document.getElementById('largeText').checked;

    // Accessibility
    settings.highContrast = document.getElementById('highContrast').checked;
    settings.reduceMotion = document.getElementById('reduceMotion').checked;

    // Update game settings
    Object.entries(settings).forEach(([key, value]) => {
      game.updateSetting(key, value);
    });

    // Apply settings immediately
    this.applySettings();

    this.closeSettings();
  }

  /**
   * Reset settings to defaults
   */
  resetSettings() {
    game.resetSettings();
    this.applySettings();
    this.closeSettings();
  }

  /**
   * Close settings modal
   */
  closeSettings() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
      modal.remove();
    }
  }

  /**
   * Apply current settings to the UI
   */
  applySettings() {
    // Apply dark mode
    const darkMode = game.getSetting('darkMode');
    if (darkMode === 'auto') {
      setTheme(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    } else {
      setTheme(darkMode);
    }

    // Apply animations
    const animationsEnabled = game.getSetting('animationsEnabled');
    document.body.style.setProperty('--transition-speed', animationsEnabled ? game.getSetting('transitionSpeed') + 's' : '0s');

    // Apply compact mode
    const compactMode = game.getSetting('compactMode');
    document.body.classList.toggle('compact-mode', compactMode);

    // Apply large text
    const largeText = game.getSetting('largeText');
    document.body.classList.toggle('large-text', largeText);

    // Apply high contrast
    const highContrast = game.getSetting('highContrast');
    document.body.classList.toggle('high-contrast', highContrast);

    // Apply reduce motion
    const reduceMotion = game.getSetting('reduceMotion');
    document.body.classList.toggle('reduce-motion', reduceMotion);

    // Re-render UI elements that depend on settings
    this.renderMap();
    this.updateXPDisplay();
  }
}

// Create global UI instance
const ui = new LanguageGameUI();
</file>

<file path="styles/components.css">
/* Category Sections */
.category-section {
  margin-bottom: var(--spacing-2xl);
  animation: fadeInUp 0.6s ease-out;
}

.category-section:nth-child(1) { animation-delay: 0.1s; }
.category-section:nth-child(2) { animation-delay: 0.2s; }
.category-section:nth-child(3) { animation-delay: 0.3s; }
.category-section:nth-child(4) { animation-delay: 0.4s; }

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.category-header {
  margin-bottom: var(--spacing-lg);
  padding: var(--spacing-md) 0 var(--spacing-sm);
  border-bottom: 3px solid var(--clr-border);
  background: linear-gradient(90deg, var(--clr-surface), transparent);
  border-radius: var(--radius-sm);
}

.category-header h3 {
  font-size: 1.4rem;
  font-weight: 700;
  color: var(--clr-primary);
  margin: 0;
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.category-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: var(--spacing-md);
}

/* Map Region Components */
.region-card {
  padding: var(--spacing-lg);
  border-radius: var(--radius-md);
  cursor: pointer;
  transition: all 0.3s ease;
  border: 2px solid transparent;
  position: relative;
  overflow: hidden;
  min-height: 140px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  box-shadow: var(--shadow-sm);
  background-image: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 50%, rgba(0, 0, 0, 0.1) 100%);
}

.region-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 50%);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.region-card:hover {
  transform: translateY(-3px);
  box-shadow: var(--shadow-lg);
  border-color: rgba(255, 255, 255, 0.3);
}

.region-card:hover::before {
  opacity: 1;
}

.region-card:hover .region-emoji {
  transform: scale(1.1) rotate(5deg);
}

.region-card.selected {
  border-color: var(--clr-primary);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  transform: translateY(-2px);
}

.region-card.selected::before {
  opacity: 0.7;
}

.region-content {
  display: flex;
  align-items: flex-start;
  gap: var(--spacing-md);
  z-index: 2;
  position: relative;
}

.region-emoji {
  font-size: 2.5rem;
  line-height: 1;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
  transition: transform 0.3s ease;
}

.region-info {
  flex: 1;
}

.region-info h4 {
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0 0 var(--spacing-xs) 0;
  color: white;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
}

.region-card .progress-info {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.9);
  font-weight: 500;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

/* Enhanced Tab Styling */
.tab-navigation {
  position: relative;
  background: var(--clr-surface);
  border-radius: var(--radius-lg) var(--radius-lg) 0 0;
  box-shadow: var(--shadow-sm);
  overflow: hidden;
}

.tab-btn {
  position: relative;
}

/* Tab Panel Animations */
.tab-panel {
  position: relative;
}

.tab-panel.active {
  animation: slideInFromRight 0.3s ease-out;
}

@keyframes slideInFromRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Tab Content Enhancements */
.tab-content {
  background: var(--clr-surface);
  border-radius: 0 0 var(--radius-lg) var(--radius-lg);
  box-shadow: var(--shadow-md);
  overflow: hidden;
}

/* Map Tab Specific Styling */
#map-tab .map-section {
  padding: var(--spacing-xl);
}

#map-tab .map-container {
  background: transparent;
  box-shadow: none;
  padding: 0;
}

/* Game Tab Specific Styling */
#game-tab .game-section {
  border-radius: 0;
  box-shadow: none;
}

/* Progress Tab Specific Styling */
#progress-tab .progress-section {
  border-radius: 0;
  box-shadow: none;
  padding: var(--spacing-xl);
}

/* Region Progress Bar */
.region-progress-bar {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 6px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 0 0 var(--radius-md) var(--radius-md);
  overflow: hidden;
}

.region-progress-fill {
  height: 100%;
  background: rgba(255, 255, 255, 0.9);
  transition: width 0.3s ease;
  border-radius: 0 0 var(--radius-md) var(--radius-md);
}



/* Flashcard Components - FIXED DESIGN */
.flashcard {
  width: 100%;
  max-width: 600px;
  height: clamp(240px, 40vh, 420px);
  margin: var(--spacing-xl) auto var(--spacing-md);
  position: relative;
  cursor: pointer;
}

.flashcard-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
}

.flashcard.flipped .flashcard-back {
  clip-path: inset(0 0 0 0);
}

.flashcard-front,
.flashcard-back {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-lg);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  font-size: 1.25rem;
  font-weight: 600;
  transition: clip-path 0.4s cubic-bezier(0.45, 0, 0.55, 1);
}

.flashcard-front {
  background: var(--clr-primary);
  color: white;
  z-index: 1;
}

.flashcard-back {
  background: var(--clr-surface);
  color: var(--clr-text);
  border: 2px solid var(--clr-border);
  clip-path: inset(0 0 100% 0);
  z-index: 2;
}

/* TTS Button Styling */
.tts-btn {
  position: absolute;
  top: var(--spacing-sm);
  right: var(--spacing-sm);
  background: rgba(255, 255, 255, 0.2);
  color: white;
  border: none;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.2s ease;
  backdrop-filter: blur(4px);
  z-index: 5;
}

.tts-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.1);
}

.flashcard-back .tts-btn {
  background: rgba(59, 130, 246, 0.2);
  color: var(--clr-primary);
}

.flashcard-back .tts-btn:hover {
  background: rgba(59, 130, 246, 0.3);
}

/* Flip Indicator Styling */
.flip-indicator {
  position: absolute;
  bottom: var(--spacing-sm);
  right: var(--spacing-sm);
  background: rgba(255, 255, 255, 0.2);
  color: white;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.9rem;
  backdrop-filter: blur(4px);
  z-index: 4;
  transition: all 0.3s ease;
  animation: pulse 2s infinite;
  pointer-events: none;
}

.flashcard:hover .flip-indicator {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.1) rotate(180deg);
  animation: none;
}

.flashcard-back .flip-indicator {
  background: rgba(59, 130, 246, 0.2);
  color: var(--clr-primary);
}

.flashcard-back:hover .flip-indicator {
  background: rgba(59, 130, 246, 0.3);
}

@keyframes pulse {
  0%, 100% {
    opacity: 0.7;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

/* Flashcard Details Card - SEPARATE CARD DESIGN */
.flashcard-details-card {
  margin-top: var(--spacing-md);
  background: var(--clr-surface);
  border: 2px solid var(--clr-border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  overflow: hidden;
  transition: all 0.3s ease;
}

.details-content {
  padding: var(--spacing-lg);
  font-size: 1.1rem;
  line-height: 1.6;
}

.context-note,
.grammar-note {
  margin-bottom: var(--spacing-md);
  padding: var(--spacing-md);
  border-radius: var(--radius-sm);
  background: rgba(59, 130, 246, 0.1);
  border-left: 3px solid var(--clr-primary);
  font-size: 1rem;
}

.context-note strong,
.grammar-note strong {
  color: var(--clr-primary);
  font-weight: 600;
  font-size: 1rem;
}

.word-breakdown {
  margin-top: var(--spacing-sm);
}

.word-breakdown strong {
  color: var(--clr-primary);
  font-weight: 600;
  display: block;
  margin-bottom: var(--spacing-sm);
  font-size: 1rem;
}

.breakdown-items {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.breakdown-item {
  padding: var(--spacing-sm);
  background: rgba(16, 185, 129, 0.1);
  border-radius: var(--radius-sm);
  border-left: 3px solid var(--clr-success);
  font-size: 1rem;
  line-height: 1.5;
}

.breakdown-item .word {
  font-weight: 600;
  color: var(--clr-success);
}

/* Flashcard Controls */
.flashcard-controls {
  display: flex;
  justify-content: center;
  gap: var(--spacing-md);
  margin-top: var(--spacing-md);
  flex-wrap: wrap;
}

.flashcard-btn {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--radius-md);
  cursor: pointer;
  font-size: .9rem;
  font-weight: 600;
  transition: all 0.2s ease;
  min-width: 0;
  flex-shrink: 1;
}

.flashcard-btn.primary {
  background: var(--clr-primary);
  color: white;
}

.flashcard-btn.primary:hover {
  background: var(--clr-secondary);
}

.flashcard-btn.secondary {
  background: var(--clr-surface);
  color: var(--clr-text);
  border: 2px solid var(--clr-border);
}

.flashcard-btn.secondary:hover {
  background: var(--clr-background);
}

/* Mobile responsive adjustments for flashcard controls */
@media (max-width: 768px) {
  .flashcard-controls {
    gap: var(--spacing-sm);
    padding: 0 var(--spacing-sm);
  }
  
  .flashcard-btn {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: 0.85rem;
    flex: 1;
    min-width: 0;
    max-width: calc(50% - var(--spacing-xs));
  }
  
  /* Stack buttons vertically on very small screens */
  @media (max-width: 480px) {
    .flashcard-controls {
      flex-direction: column;
      gap: var(--spacing-sm);
    }
    
    .flashcard-btn {
      max-width: none;
      width: 100%;
    }
  }
}

/* Quiz Components */
.quiz-question {
  text-align: center;
  margin-bottom: var(--spacing-xl);
}

.quiz-question h4 {
  font-size: 1.25rem;
  margin-bottom: var(--spacing-md);
  color: var(--clr-text);
}

.quiz-options {
  display: grid;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-lg);
}

.quiz-option {
  padding: var(--spacing-md);
  border: 2px solid var(--clr-border);
  border-radius: var(--radius-md);
  background: var(--clr-surface);
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: center;
  font-weight: 500;
}

.quiz-option:hover {
  border-color: var(--clr-primary);
  background: rgba(59, 130, 246, 0.05);
}

.quiz-option.correct {
  border-color: var(--clr-success);
  background: rgba(16, 185, 129, 0.1);
  color: var(--clr-success);
}

.quiz-option.incorrect {
  border-color: var(--clr-error);
  background: rgba(239, 68, 68, 0.1);
  color: var(--clr-error);
}

.quiz-feedback {
  text-align: center;
  padding: var(--spacing-md);
  border-radius: var(--radius-md);
  margin-bottom: var(--spacing-lg);
  font-weight: 600;
}

.quiz-feedback.correct {
  background: rgba(16, 185, 129, 0.1);
  color: var(--clr-success);
  border: 1px solid var(--clr-success);
}

.quiz-feedback.incorrect {
  background: rgba(239, 68, 68, 0.1);
  color: var(--clr-error);
  border: 1px solid var(--clr-error);
}

/* Call & Response Components */
.cr-prompt {
  text-align: center;
  margin-bottom: var(--spacing-lg);
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--clr-text);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
}

.cr-input {
  width: 100%;
  padding: var(--spacing-md);
  border: 2px solid var(--clr-border);
  border-radius: var(--radius-md);
  font-size: 1rem;
  margin-bottom: var(--spacing-md);
  transition: border-color 0.2s ease;
}

.cr-input:focus {
  outline: none;
  border-color: var(--clr-primary);
}

.cr-submit {
  width: 100%;
  padding: var(--spacing-md);
  background: var(--clr-primary);
  color: white;
  border: none;
  border-radius: var(--radius-md);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s ease;
}

.cr-submit:hover {
  background: var(--clr-secondary);
}

/* Enhanced Call & Response Feedback */
.cr-feedback {
  padding: var(--spacing-md);
  border-radius: var(--radius-md);
  margin-top: var(--spacing-md);
  border: 1px solid;
}

.cr-feedback.correct {
  background: rgba(16, 185, 129, 0.1);
  border-color: var(--clr-success);
  color: var(--clr-success);
}

.cr-feedback.incorrect {
  background: rgba(239, 68, 68, 0.1);
  border-color: var(--clr-error);
  color: var(--clr-error);
}

.feedback-details {
  font-size: 0.875rem;
  margin-top: var(--spacing-xs);
  opacity: 0.8;
}

.correct-answer {
  font-weight: 600;
  margin: var(--spacing-xs) 0;
}

/* Call & Response Control Buttons */
.cr-controls {
  display: flex;
  gap: var(--spacing-md);
  justify-content: center;
  margin-top: var(--spacing-md);
}

.cr-try-again,
.cr-continue {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--radius-md);
  font-size: 0.9rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

.cr-try-again {
  background: var(--clr-warning);
  color: white;
}

.cr-try-again:hover {
  background: #d97706;
  transform: translateY(-1px);
}

.cr-continue {
  background: var(--clr-primary);
  color: white;
}

.cr-continue:hover {
  background: var(--clr-secondary);
  transform: translateY(-1px);
}

/* Progress Bar Components */
.progress-item {
  background: var(--clr-surface);
  border: 1px solid var(--clr-border);
  border-radius: var(--radius-md);
  padding: var(--spacing-md);
}

.progress-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.progress-title {
  font-weight: 600;
  color: var(--clr-text);
}

.progress-percentage {
  font-size: 0.875rem;
  color: var(--clr-text-muted);
  font-weight: 600;
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: var(--clr-border);
  border-radius: var(--radius-sm);
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, var(--clr-success), var(--clr-primary));
  transition: width 0.3s ease;
  border-radius: var(--radius-sm);
}

/* Animation Classes */
.fade-in {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.slide-in {
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Loading States */
.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
  color: var(--clr-text-muted);
}

.loading::after {
  content: '';
  width: 20px;
  height: 20px;
  border: 2px solid var(--clr-border);
  border-top: 2px solid var(--clr-primary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Utility Classes */
.text-center {
  text-align: center;
}

.text-muted {
  color: var(--clr-text-muted);
}

.mb-sm {
  margin-bottom: var(--spacing-sm);
}

.mb-md {
  margin-bottom: var(--spacing-md);
}

.mb-lg {
  margin-bottom: var(--spacing-lg);
}

.mt-sm {
  margin-top: var(--spacing-sm);
}

.mt-md {
  margin-top: var(--spacing-md);
}

.mt-lg {
  margin-top: var(--spacing-lg);
} 

/* Settings Button */
.settings-btn {
  background: var(--clr-surface);
  color: var(--clr-text);
  border: 2px solid var(--clr-border);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  font-size: 1.2rem;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.settings-btn:hover {
  background: var(--clr-primary);
  color: white;
  transform: scale(1.1);
}

/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
}

.modal-content {
  background: var(--clr-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  max-width: 90vw;
  max-height: 90vh;
  overflow: hidden;
  border: 2px solid var(--clr-border);
}

.settings-modal {
  width: 600px;
  max-height: 80vh;
}

.flashcard-tip-modal {
  width: 500px;
  max-width: 90vw;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-lg);
  border-bottom: 2px solid var(--clr-border);
  background: var(--clr-primary);
  color: white;
}

.modal-header h2 {
  margin: 0;
  font-size: 1.5rem;
}

.modal-close {
  background: none;
  border: none;
  color: white;
  font-size: 2rem;
  cursor: pointer;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.2s ease;
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.2);
}

.modal-body {
  padding: var(--spacing-lg);
  overflow-y: auto;
  max-height: 60vh;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-md);
  padding: var(--spacing-lg);
  border-top: 2px solid var(--clr-border);
  background: var(--clr-background);
}

/* Settings Sections */
.settings-section {
  margin-bottom: var(--spacing-xl);
}

.settings-section h3 {
  margin: 0 0 var(--spacing-md) 0;
  color: var(--clr-primary);
  font-size: 1.1rem;
  border-bottom: 2px solid var(--clr-border);
  padding-bottom: var(--spacing-xs);
}

.setting-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: var(--spacing-sm);
  padding: var(--spacing-sm);
  background: var(--clr-background);
  border-radius: var(--radius-sm);
  border: 1px solid var(--clr-border);
}

.setting-item label {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  cursor: pointer;
  font-weight: 500;
}

.setting-item input[type="checkbox"] {
  width: 18px;
  height: 18px;
  accent-color: var(--clr-primary);
}

.setting-item input[type="range"] {
  width: 120px;
  margin: 0 var(--spacing-sm);
}

.setting-item select {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid var(--clr-border);
  border-radius: var(--radius-sm);
  background: var(--clr-surface);
  color: var(--clr-text);
  font-size: 0.9rem;
}

.setting-item span {
  min-width: 40px;
  text-align: right;
  font-weight: 600;
  color: var(--clr-primary);
}

/* Button Styles */
.btn {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--radius-md);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.9rem;
}

.btn.primary {
  background: var(--clr-primary);
  color: white;
}

.btn.primary:hover {
  background: var(--clr-secondary);
  transform: translateY(-1px);
}

.btn.secondary {
  background: var(--clr-surface);
  color: var(--clr-text);
  border: 2px solid var(--clr-border);
}

.btn.secondary:hover {
  background: var(--clr-background);
  border-color: var(--clr-primary);
}

/* Accessibility Classes */
.compact-mode {
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 0.75rem;
  --spacing-lg: 1rem;
  --spacing-xl: 1.5rem;
}

.large-text {
  font-size: 1.1rem;
}

.large-text .flashcard-front,
.large-text .flashcard-back {
  font-size: 1.4rem;
}

.high-contrast {
  --clr-primary: #0000ff;
  --clr-secondary: #ff0000;
  --clr-success: #00ff00;
  --clr-error: #ff0000;
  --clr-warning: #ffff00;
}

/* Reduce motion for accessibility */
.reduce-motion * {
  animation-duration: 0.01ms !important;
  animation-iteration-count: 1 !important;
  transition-duration: 0.01ms !important;
}

/* Clickable Words and Popup Styles */
.clickable-word {
  cursor: pointer;
  color: inherit;
  transition: all 0.2s ease;
  border-radius: 2px;
  padding: 1px 2px;
}

.clickable-word:hover {
  background: rgba(59, 130, 246, 0.1);
  text-decoration-color: var(--clr-secondary);
  transform: translateY(-1px);
}

.clickable-word:active {
  transform: translateY(0);
}

/* Multi-word phrase styling */
.clickable-word.multi-word-phrase {
  border-bottom: 2px dotted rgba(59, 130, 246, 0.6);
  padding: 2px 4px;
  margin: 0 1px;
  background: rgba(59, 130, 246, 0.05);
}

.clickable-word.multi-word-phrase:hover {
  background: rgba(59, 130, 246, 0.15);
  border-bottom-color: var(--clr-primary);
  border-bottom-style: solid;
}

/* Word Popup */
.word-popup {
  position: fixed;
  z-index: 10000;
  background: var(--clr-surface);
  border: 2px solid var(--clr-border);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-lg);
  max-width: 300px;
  min-width: 200px;
  animation: popupFadeIn 0.2s ease-out;
  backdrop-filter: blur(8px);
}

@keyframes popupFadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.popup-content {
  padding: 0;
  overflow: hidden;
}

.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-sm) var(--spacing-md);
  background: var(--clr-primary);
  color: white;
  border-bottom: 1px solid var(--clr-border);
}

.popup-word {
  font-weight: 600;
  font-size: 1rem;
}

.popup-close {
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.2s ease;
}

.popup-close:hover {
  background: rgba(255, 255, 255, 0.2);
}

.popup-body {
  padding: var(--spacing-md);
}

.popup-explanation {
  color: var(--clr-text);
  font-size: 0.9rem;
  line-height: 1.4;
}

/* Dark mode adjustments for popup */
[data-theme="dark"] .word-popup {
  background: var(--clr-surface);
  border-color: var(--clr-border);
}

[data-theme="dark"] .popup-explanation {
  color: var(--clr-text);
}

/* Responsive popup positioning */
@media (max-width: 768px) {
  .word-popup {
    max-width: calc(100vw - 40px);
    min-width: 250px;
  }
  
  .popup-content {
    font-size: 0.9rem;
  }
}

/* Ensure popup doesn't go off-screen */
.word-popup {
  max-height: 200px;
  overflow-y: auto;
}

/* Hover effect for clickable words in different contexts */
.flashcard-front .clickable-word,
.flashcard-back .clickable-word {
  color: inherit;
  text-decoration-color: rgba(255, 255, 255, 0.8);
}

.flashcard-front .clickable-word:hover {
  background: rgba(255, 255, 255, 0.2);
  text-decoration-color: white;
}

.flashcard-back .clickable-word:hover {
  background: rgba(59, 130, 246, 0.15);
}

.quiz-option .clickable-word:hover {
  background: rgba(59, 130, 246, 0.1);
}

.cr-prompt .clickable-word:hover {
  background: rgba(59, 130, 246, 0.1);
}
</file>

</files>
